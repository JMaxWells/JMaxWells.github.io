<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaxWellPro&#39;s Hexo Blog</title>
  <subtitle>分享一些技术文章和自己所整理的知识。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-17T06:14:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MaxWellPro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Workflow实现快速百度搜索</title>
    <link href="http://yoursite.com/2017/04/13/%E7%94%A8Workflow%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2017/04/13/用Workflow实现快速百度搜索/</id>
    <published>2017-04-13T09:41:28.000Z</published>
    <updated>2017-04-17T06:14:48.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;用Workflow实现快速百度搜索&quot;&gt;&lt;a href=&quot;#用Workflow实现快速百度搜索&quot; class=&quot;headerlink&quot; title=&quot;用Workflow实现快速百度搜索&quot;&gt;&lt;/a&gt;用Workflow实现快速百度搜索&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“即便在如此封闭的系统中，它 (Workflow) 也能无情压榨使用者的所有想象力。”－ App Store 某评价摘录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-a990fbd601b4e303?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;http://www.appinn.com/workflow-for-ios-one/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Workflow&lt;/a&gt;&lt;/strong&gt; 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。&lt;/p&gt;
&lt;p&gt;今天就跟大家简单来介绍一下快速实现百度搜索，先来看下流程图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-163854a58ae4482c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;流程图对比&quot;&gt;&lt;/p&gt;
&lt;p&gt;好了，废话不多说。Let’s do this.&lt;/p&gt;
&lt;h2 id=&quot;新建Workflow&quot;&gt;&lt;a href=&quot;#新建Workflow&quot; class=&quot;headerlink&quot; title=&quot;新建Workflow&quot;&gt;&lt;/a&gt;新建Workflow&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-cd12d3643e484a43.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;新建Workflow&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意选择的是Today Widget才会出现在通知中心中。&lt;/p&gt;
&lt;h2 id=&quot;选择Action&quot;&gt;&lt;a href=&quot;#选择Action&quot; class=&quot;headerlink&quot; title=&quot;选择Action&quot;&gt;&lt;/a&gt;选择Action&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-554645435a10a14d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;选择Action&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，我们需要获取黏贴板的内容，就把Get ClipBoard按住移动到右边的Workflow中。如下图所示&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-729c8f35f10b3b3d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;IMG_2697.PNG&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据黏贴板的内容生成Text&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-abb0ba095dfbcfba.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;根据黏贴板的内容生成Text&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击Input后键盘上就弹出了一个工具栏，我们选择ClipBoard，也就意味着Text是从黏贴板中获取的内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据Text生成URL&lt;br&gt;百度搜索的地址为&lt;a href=&quot;https://m.baidu.com/from=1000539d/pu=sz%401320_2001/s?word=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.baidu.com/from=1000539d/pu=sz%401320_2001/s?word=&lt;/a&gt;,在这个网址的基础上拼接上Text的内容，就是最后搜索结果的网址了。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-4172948d554e98ce.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;根据Text生成URL&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在word后面选择小工具栏上的Text，如下图。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-2617249dfbd202b4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;拼接Text&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开URLs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-a2e4821880e5eec9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;IMG_2701.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后我们来看下实现效果怎么样。如果选择Normal只能在app里边运行，选择Today Widget就可以在不打开App的情况下直接运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-092fb66e18b5ff07.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;在App中运行&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-31d718c8b2d42754.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;在通知中心运行&quot;&gt;&lt;/p&gt;
&lt;p&gt;———————— 我的底线就这么多了 ————————&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用Workflow实现快速百度搜索&quot;&gt;&lt;a href=&quot;#用Workflow实现快速百度搜索&quot; class=&quot;headerlink&quot; title=&quot;用Workflow实现快速百度搜索&quot;&gt;&lt;/a&gt;用Workflow实现快速百度搜索&lt;/h1&gt;&lt;blockquote&gt;

    
    </summary>
    
      <category term="效率工具" scheme="http://yoursite.com/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Workflow" scheme="http://yoursite.com/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/Workflow/"/>
    
    
      <category term="效率工具" scheme="http://yoursite.com/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Workflow" scheme="http://yoursite.com/tags/Workflow/"/>
    
  </entry>
  
  <entry>
    <title>让WebKit支持URLProtocol拦截实现WebP省流量方案《WKWebView不再从入门到放弃》</title>
    <link href="http://yoursite.com/2017/03/24/%E8%AE%A9WebKit%E6%94%AF%E6%8C%81URLProtocol%E6%8B%A6%E6%88%AA%E5%AE%9E%E7%8E%B0WebP%E7%9C%81%E6%B5%81%E9%87%8F%E6%96%B9%E6%A1%88%E3%80%8AWKWebView%E4%B8%8D%E5%86%8D%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E3%80%8B/"/>
    <id>http://yoursite.com/2017/03/24/让WebKit支持URLProtocol拦截实现WebP省流量方案《WKWebView不再从入门到放弃》/</id>
    <published>2017-03-24T06:48:06.000Z</published>
    <updated>2017-03-24T06:49:49.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;WKWebView的各种好处，有不少开发者都按捺不住骚动的心，开始操刀在项目里将UIWebView替换成WKWebView，然后就出现了《WKWebView从入门到放弃》其中WKWebView不支持NSURLProtocol就让不少开发者望而却步。这样一样，可能会导致原来UIWebView的省流量方案不生效。直到前几天，我看到了大神的这篇文章&lt;a href=&quot;http://www.jianshu.com/p/55f5ac1ab817&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView 不支持 NSURLProtocol 吗&lt;/a&gt;。大神从底层分析了，WKWebView不走NSURLProtocol的原因，最后得出的结论是WebKit是支持NSURLProtocol的，只是WebKit还不够完成，另外一点是调用了私有API很可能被拒，也只支持iOS8.4+。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://quncao-app.b0.upaiyun.com/0_index5a57e8b73600f8cf00bf42924a8f0078.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;WKWebView的特性：&quot;&gt;&lt;a href=&quot;#WKWebView的特性：&quot; class=&quot;headerlink&quot; title=&quot;WKWebView的特性：&quot;&gt;&lt;/a&gt;WKWebView的特性：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;WKWebView的性能想必不用多说了 在性能、稳定性、功能方面有很大提升，直观体现是内存占用变少；&lt;/li&gt;
&lt;li&gt;允许JavaScript的Nitro库加载并使用（UIWebView中限制）；&lt;/li&gt;
&lt;li&gt;支持了更多的HTML5特性；&lt;/li&gt;
&lt;li&gt;高达60fps的滚动刷新率以及内置手势；&lt;/li&gt;
&lt;li&gt;将UIWebViewDelegate与UIWebView重构成了14类与3个协议；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;NSURLProtocol工作原理&quot;&gt;&lt;a href=&quot;#NSURLProtocol工作原理&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol工作原理&quot;&gt;&lt;/a&gt;NSURLProtocol工作原理&lt;/h2&gt;&lt;p&gt;NSURLProtocol可以拦截监听每一个URL Loading System中发出request请求，记住是URL Loading System中那些类发出的请求，也支持AFNetwoking，UIWebView发出的request。如果不是这些类发出的请求，NSURLProtocol就没办法拦截和监听了。&lt;/p&gt;
&lt;h3 id=&quot;拦截代码&quot;&gt;&lt;a href=&quot;#拦截代码&quot; class=&quot;headerlink&quot; title=&quot;拦截代码&quot;&gt;&lt;/a&gt;拦截代码&lt;/h3&gt;&lt;p&gt;调用该代码则表示拦截成功，会将网页中图片地址转化成WebP格式，并由SDWebImageDownloader下载并缓存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)startLoading &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableURLRequest *mutableReqeust = [[self request] mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //标示改request已经处理过了，防止无限循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSURLProtocol setProperty:@YES forKey:URLProtocolHandledKey inRequest:mutableReqeust];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *URLString = [self.request.URL absoluteString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSURL *imageURL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 重定义请求地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ([URLString rangeOfString:@&amp;quot;format&amp;quot;].location == NSNotFound) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imageURL = [WKWebImageHelper webImageStringToURL:URLString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.connection = [NSURLConnection connectionWithRequest:mutableReqeust delegate:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #warning - 敲黑板 画重点了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[SDWebImageDownloader sharedDownloader] downloadImageWithURL:imageURL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          options:0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                         progress:nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, BOOL finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            // 是否以png结尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            if ([imageURL.absoluteString.lowercaseString hasSuffix:@&amp;quot;.png&amp;quot;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                data = UIImagePNGRepresentation(image);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                data = UIImageJPEGRepresentation(image, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            if (!self.client) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                return ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            [self.client URLProtocol:self didLoadData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            [self.client URLProtocolDidFinishLoading:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体的代码大家可以去我的github下载。下载地址在↓。&lt;/p&gt;
&lt;h3 id=&quot;Demo截图&quot;&gt;&lt;a href=&quot;#Demo截图&quot; class=&quot;headerlink&quot; title=&quot;Demo截图&quot;&gt;&lt;/a&gt;Demo截图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1859162-861e7ddb7ffd69ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Simulator Screen Shot 2017年3月22日 下午5.22.58.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JMaxWells/WebKitSupportURLProtocol/tree/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文Demo:WebKitSupportURLProtocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.yeatse.com/2016/10/26/support-nsurlprotocol-in-wkwebview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSURLProtocol-WebKitSupport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;推荐文章&quot;&gt;&lt;a href=&quot;#推荐文章&quot; class=&quot;headerlink&quot; title=&quot;推荐文章&quot;&gt;&lt;/a&gt;推荐文章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/8d6f201536e9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HybridKit缓存及流量优化方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;amp;mid=2653578513&amp;amp;idx=1&amp;amp;sn=961bf5394eecde40a43060550b81b0bb&amp;amp;chksm=84b3b716b3c43e00ee39de8cf12ff3f8d475096ffaa05de9c00ff65df62cd73aa1cff606057d&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0203vWJWfMGMWwf5NZ8N1ibS&amp;amp;key=7986e1e970a89067a86106b2930c5f6fae92da1b552eeb4696133c44e4169fb458d9a94ff0469f97f76e0a87fcfb05a375902d563045184f88550caaca3d47f3ddb0004c0133e68eb0c719bcbe514460&amp;amp;ascene=0&amp;amp;uin=MTM2NTIyOTI0MA==&amp;amp;devicetype=iMac+MacBookPro11,5+OSX+OSX+10.12.3+build(16D32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView 那些坑&lt;/a&gt;&amp;amp;version=12010310&amp;amp;nettype=WIFI&amp;amp;fontScale=100&amp;amp;pass_ticket=aq4MxrhuXuqAWgcklzpe0lU/Eo6zKVJheDZdgcMAeJaVUSaI3npVIEglSZC6GJg4)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/55f5ac1ab817&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView 不支持 NSURLProtocol 吗&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;WKWebView的各种好处，有不少开发者都按捺不住骚动的心，开始操刀在项目里将UIWebView替换成WKWebView，然后就出现了《WKWebView从入门到放弃》其中WKWebView不支持NSURLProtocol就让不少开发者望而却步。
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="WKWebView" scheme="http://yoursite.com/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>组件化与模块化之路</title>
    <link href="http://yoursite.com/2017/03/23/%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/03/23/组件化与模块化之路/</id>
    <published>2017-03-23T04:08:52.000Z</published>
    <updated>2017-03-24T06:59:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;组件化与模块化之路&quot;&gt;&lt;a href=&quot;#组件化与模块化之路&quot; class=&quot;headerlink&quot; title=&quot;组件化与模块化之路&quot;&gt;&lt;/a&gt;组件化与模块化之路&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Nike说：Just Do IT（挨踢）——  写在模块化试运行一周后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img3.jiemian.com/101/original/20150319/142675626298644800_a580x330.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;早在去年，就有所耳闻公司将会实行事业部的划分,如今按照公司业务的划分，iOS开发的小伙伴大多都被分到对应的业务事业部去了，这感觉像是我们处于同一个假部门 ，扯远了~咳咳咳。为了更好的支撑公司业务的快速发展和产品迭代，我们采用了项目组件化的解决方案。从去年开始我们就为组件化之路做了不少前期准备，其中不仅仅只是将公用的类抽象成组件，还包括将业务代码从项目中剥离出来，就先称它为模块化吧，模块化的好处在于可以支持各大业务线独立发版，适合赶火车的开发模式，正是我们团队现在所走的敏捷开发路线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目组件化&quot;&gt;&lt;a href=&quot;#项目组件化&quot; class=&quot;headerlink&quot; title=&quot;项目组件化&quot;&gt;&lt;/a&gt;项目组件化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;要做模块化的话，就要先从组件化开始，把组件进行抽象，封装做成独立的Pod库，以便于维护版本和复用。等做完了组件化，就开始搞模块化了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CocoaPods管理组件&quot;&gt;&lt;a href=&quot;#CocoaPods管理组件&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods管理组件&quot;&gt;&lt;/a&gt;CocoaPods管理组件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def bigfan_private_pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #私有组件库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFRefreshHeader&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFHTTPManager&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;LKGlobalNavigation&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFPhotosPicker&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFLocationManager&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFNetworkActivityLogger&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFPhotosBrowser&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFActionSheet&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFWebImageHelper&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFPhotosPickerManager&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFCustomHUD&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFPlacePicker&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFLogServiceManager&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFNavigator&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFEmptyDataSet&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;BFQRCode&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;, :commit =&amp;gt; &amp;apos;7c0636fecc8a43ea4415e2e996b145d3ec9f9ab4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;NSObjectSafe&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：commit可以指定分支上的某一次commit记录。&lt;/p&gt;
&lt;h2 id=&quot;业务模块化&quot;&gt;&lt;a href=&quot;#业务模块化&quot; class=&quot;headerlink&quot; title=&quot;业务模块化&quot;&gt;&lt;/a&gt;业务模块化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简而言之，就是把业务代码从主项目里剥离出来，用Pod做成一个单独的库来管理。模块化的要求是：业务模块代码可以在壳工程加平台模块上独立运行，当然我们还要求壳工程在没有导入任何业务模块也能独运行起来，所以业务解耦是多么得重要。刚才说到模块化第一步是组件化，走完第一步后，模块化过程中我们遇到了不少问题，包括业务之间的解耦和数据共享，业务模块之间的相互依赖和调用。之后引入了DataCenter这个组件来解决业务之间的耦合和数据共享。以后有机会会详细介绍一下DataCenter的原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CocoaPods管理模块组件&quot;&gt;&lt;a href=&quot;#CocoaPods管理模块组件&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods管理模块组件&quot;&gt;&lt;/a&gt;CocoaPods管理模块组件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def bigfan_pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bigfan_thirdparty_pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bigfan_local_pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bigfan_private_pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # s.dependencys for test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; # 平台模块组件 当前使用的是远程仓库的Crust库代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;Crust&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;, :branch =&amp;gt; &amp;apos;feature/3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #业务模块组件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;Match&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;, :branch =&amp;gt; &amp;apos;feature/3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;TalentC&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;, :branch =&amp;gt; &amp;apos;feature/3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;Stadium&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;, :branch =&amp;gt; &amp;apos;feature/3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &amp;apos;Club&amp;apos;, :git =&amp;gt; &amp;apos;项目地址&amp;apos;, :branch =&amp;gt; &amp;apos;feature/3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：branch可以指定某个分支上的代码。&lt;/p&gt;
&lt;h4 id=&quot;如何开发&quot;&gt;&lt;a href=&quot;#如何开发&quot; class=&quot;headerlink&quot; title=&quot;如何开发&quot;&gt;&lt;/a&gt;如何开发&lt;/h4&gt;&lt;p&gt;只要将‘pod ‘Crust’, :git =&amp;gt; ‘项目地址’, :branch =&amp;gt; ‘feature/3.0’’修改成‘  pod ‘Crust’, :path =&amp;gt; ‘/Users/maxwellpro/Crust’’后Pod install，这样就直接将平台模块指向我本地的Crust库，等我开发完成就直接提交Crust库的代码，不会影其他业务模块的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; # s.dependencys for test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 平台模块组件 当前使用的是本地仓库的Crust库代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pod &amp;apos;Crust&amp;apos;, :path =&amp;gt; &amp;apos;/Users/maxwellpro/Crust&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS:假设我是平台组的，我只能修改平台（Crust）模块的代码，不能修改Match、TalentC、Stadium、Club这四大业务模块的代码，即使我修改了，最终也是没有权限提交的。&lt;/p&gt;
&lt;h2 id=&quot;DataCenter&quot;&gt;&lt;a href=&quot;#DataCenter&quot; class=&quot;headerlink&quot; title=&quot;DataCenter&quot;&gt;&lt;/a&gt;DataCenter&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;业务模块的数据源（DataSource）在App启动时，就向DataCenter主动注册业务模块可以提供哪些服务，当业务模块A需要获取业务模块B数据的时候，业务模块A向DataCenter发起请求，DataCenter在服务列表中找到业务模块B注册的服务DataSourceB，DataSourceB执行事先写好的服务，数据返回给业务模块A，就实现了业务之间的数据传递和方法调用。现在的DataCenter还不够强大，暂时还不能实现共享View。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;独立开发模式&lt;/li&gt;
&lt;li&gt;独立业务&lt;/li&gt;
&lt;li&gt;独立项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;业务线：&quot;&gt;&lt;a href=&quot;#业务线：&quot; class=&quot;headerlink&quot; title=&quot;业务线：&quot;&gt;&lt;/a&gt;业务线：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用平台组提供的壳工程+平台基础服务进行开发。&lt;/li&gt;
&lt;li&gt;不能提交壳工程代码。&lt;/li&gt;
&lt;li&gt;单个业务线可以在壳工程上独立运行。 &lt;/li&gt;
&lt;li&gt;不能直接依赖其他业务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;平台组：&quot;&gt;&lt;a href=&quot;#平台组：&quot; class=&quot;headerlink&quot; title=&quot;平台组：&quot;&gt;&lt;/a&gt;平台组：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不能提交业务代码。&lt;/li&gt;
&lt;li&gt;不能直接调用业务代码。&lt;/li&gt;
&lt;li&gt;业务解耦和独立运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;异常流&quot;&gt;&lt;a href=&quot;#异常流&quot; class=&quot;headerlink&quot; title=&quot;异常流&quot;&gt;&lt;/a&gt;异常流&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Not Found ‘xx’ File - Pod install&lt;/li&gt;
&lt;li&gt;Can’t open Pods.xcodeproj - Pod install后重启Xcode&lt;/li&gt;
&lt;li&gt;Conflicts:    BigFan/Pods/Pods.xcodeproj/project.pbxproj - Pod install&lt;/li&gt;
&lt;li&gt;Pod install 报错 - Pod repo update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;存在的问题&quot;&gt;&lt;a href=&quot;#存在的问题&quot; class=&quot;headerlink&quot; title=&quot;存在的问题&quot;&gt;&lt;/a&gt;存在的问题&lt;/h2&gt;&lt;p&gt;目前在试运行的时候发现CocoaPods的缓存机制会导致代码可能不是最新的。&lt;/p&gt;
&lt;h3 id=&quot;关于Pod-库改成了本地路径pod-install-后还在-pods-文件来下面的解决方法。&quot;&gt;&lt;a href=&quot;#关于Pod-库改成了本地路径pod-install-后还在-pods-文件来下面的解决方法。&quot; class=&quot;headerlink&quot; title=&quot;关于Pod 库改成了本地路径pod install 后还在 pods 文件来下面的解决方法。&quot;&gt;&lt;/a&gt;关于Pod 库改成了本地路径pod install 后还在 pods 文件来下面的解决方法。&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原因：CocoaPods 缓存引起的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1 先在Podfile 里面注掉该Pod库 &lt;/li&gt;
&lt;li&gt;2 Pod install &lt;/li&gt;
&lt;li&gt;3 然后在Podfile 里面打开该Pod库 &lt;/li&gt;
&lt;li&gt;4 Pod install&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;组件化与模块化之路&quot;&gt;&lt;a href=&quot;#组件化与模块化之路&quot; class=&quot;headerlink&quot; title=&quot;组件化与模块化之路&quot;&gt;&lt;/a&gt;组件化与模块化之路&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Nike说：Just Do IT（挨踢）——  写在模块化
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS设备唯一标识符解决方案</title>
    <link href="http://yoursite.com/2017/03/22/iOS%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/03/22/iOS设备唯一标识符解决方案/</id>
    <published>2017-03-22T07:38:56.000Z</published>
    <updated>2017-03-24T06:57:56.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS设备唯一标识符解决方案&quot;&gt;&lt;a href=&quot;#iOS设备唯一标识符解决方案&quot; class=&quot;headerlink&quot; title=&quot;iOS设备唯一标识符解决方案&quot;&gt;&lt;/a&gt;iOS设备唯一标识符解决方案&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记得当时做过一个电商项目，甲方提出的要求是这样的：用户可以在不登录的情况下，以游客模式下单购物，而不被注册or登录打断购物流程。这个技术难点主要是怎么永久保存App的用户数据，要做到用户卸载重装App后，还能识别是哪个用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;UUID&quot;&gt;&lt;a href=&quot;#UUID&quot; class=&quot;headerlink&quot; title=&quot;UUID&quot;&gt;&lt;/a&gt;UUID&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;UUID是Universally Unique Identifier的缩写，中文意思是通用唯一识别码。它是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。这样，每个人都可以建立不与其它人冲突的 UUID。苹果公司建议使用UUID为应用生成唯一标识字符串。 iOS 6中介绍的Vendor或Advertising标示符,通过下面的代码可以获得一个UUID字符串：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何获取UUID&quot;&gt;&lt;a href=&quot;#如何获取UUID&quot; class=&quot;headerlink&quot; title=&quot;如何获取UUID&quot;&gt;&lt;/a&gt;如何获取UUID&lt;/h2&gt;&lt;p&gt;方法1.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *uuid = [[&lt;span class=&quot;type&quot;&gt;NSUUID&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;UUID&lt;/span&gt;] &lt;span class=&quot;type&quot;&gt;UUIDString&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以保存在iOS 6中新增的Vindor标示符 (IDFV-identifierForVendor)，获取这个IDFV的新方法被添加在已有的UIDevice类中。跟advertisingIdentifier一样，该方法返回的是一个NSUUID对象。&lt;/p&gt;
&lt;p&gt;方法2.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *uuid = [[[&lt;span class=&quot;type&quot;&gt;UIDevice&lt;/span&gt; currentDevice] identifierForVendor] &lt;span class=&quot;type&quot;&gt;UUIDString&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法3.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *uuid  = (&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)&lt;span class=&quot;type&quot;&gt;CFBridgingRelease&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;CFUUIDCreateString&lt;/span&gt; (kCFAllocatorDefault,uuidRef));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Keychain&quot;&gt;&lt;a href=&quot;#Keychain&quot; class=&quot;headerlink&quot; title=&quot;Keychain&quot;&gt;&lt;/a&gt;Keychain&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;开发者可以在应用第一次启动时调用一次，然后将该串存储起来，以便以后替代UDID来使用。但是，如果用户删除该应用再次安装时，又会生成新的字符串，所以不能保证唯一识别该设备。由于IOS系统存储的数据都是在sandBox里面，一旦删除App，sandBox也不复存在。好在有一个例外，那就是keychain(钥匙串)。通常情况下，IOS系统用NSUserDefaults存储数据信息，但是对于一些私密信息，比如密码、证书等等，就需要使用更为安全的keychain了。&lt;/p&gt;
&lt;p&gt;keychain里保存的信息不会因App被删除而丢失。所以，可以利用这个keychain这个特点来保存设备唯一标识。所以这里要用到KeyChain来保存。&lt;/p&gt;
&lt;p&gt;那么，如何在应用里使用使用keyChain呢，可以使用第三方库的YYKeychain来实现，我们可以使用苹果已经封装好了的工具类&lt;a href=&quot;https://developer.apple.com/library/ios/samplecode/GenericKeychain/Listings/Classes_KeychainItemWrapper_h.html#//apple_ref/doc/uid/DTS40007797-Classes_KeychainItemWrapper_h-DontLinkElementID_9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KeychainItemWrapper&lt;/a&gt;来对keychain进行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)getUUID &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *uuid = [&lt;span class=&quot;type&quot;&gt;YYKeychain&lt;/span&gt; getPasswordForService:@&lt;span class=&quot;string&quot;&gt;&quot;YouAppleTeamID.com.test.porject&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               account:@&lt;span class=&quot;string&quot;&gt;&quot;UUID&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (uuid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uuid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(error)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;从Keychain里获取密码出错：%@&quot;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//首次执行该方法时，uuid为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([uuid isEqualToString:@&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;] || !uuid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;CFUUIDRef&lt;/span&gt; uuidRef = &lt;span class=&quot;type&quot;&gt;CFUUIDCreate&lt;/span&gt;(kCFAllocatorDefault);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uuid = (&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)&lt;span class=&quot;type&quot;&gt;CFBridgingRelease&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;CFUUIDCreateString&lt;/span&gt; (kCFAllocatorDefault,uuidRef));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/** 保存用户的密码*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt; saved = [&lt;span class=&quot;type&quot;&gt;YYKeychain&lt;/span&gt; setPassword:uuid forService:@&lt;span class=&quot;string&quot;&gt;&quot;YouAppleTeamID.com.test.porject&quot;&lt;/span&gt; account:@&lt;span class=&quot;string&quot;&gt;&quot;UUID&quot;&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!saved) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;保存密码时出错：%@&quot;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uuid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在首次打开App的时候，会给用户生成一个唯一的UUID并存储在keychain中，当用户卸载App后，重新安装打开后，会从Keychain中获取存储的UUID，这样就能实现用户的唯一标识。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS设备唯一标识符解决方案&quot;&gt;&lt;a href=&quot;#iOS设备唯一标识符解决方案&quot; class=&quot;headerlink&quot; title=&quot;iOS设备唯一标识符解决方案&quot;&gt;&lt;/a&gt;iOS设备唯一标识符解决方案&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记得当时做过一个电
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="唯一标识符" scheme="http://yoursite.com/tags/%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>初尝甜品之Gitflow工作流</title>
    <link href="http://yoursite.com/2017/03/20/%E5%88%9D%E5%B0%9D%E7%94%9C%E5%93%81%E4%B9%8BGitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>http://yoursite.com/2017/03/20/初尝甜品之GitFlow工作流/</id>
    <published>2017-03-20T07:08:52.000Z</published>
    <updated>2017-03-24T07:00:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;初尝甜品之Gitflow工作流&quot;&gt;&lt;a href=&quot;#初尝甜品之Gitflow工作流&quot; class=&quot;headerlink&quot; title=&quot;初尝甜品之Gitflow工作流&quot;&gt;&lt;/a&gt;初尝甜品之Gitflow工作流&lt;/h1&gt;&lt;h1 id=&quot;GitFlow工作流：&quot;&gt;&lt;a href=&quot;#GitFlow工作流：&quot; class=&quot;headerlink&quot; title=&quot;GitFlow工作流：&quot;&gt;&lt;/a&gt;GitFlow工作流：&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/quickhack/translations/master/git-workflows-and-tutorials/images/git-workflow-release-cycle-4maintenance.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分支介绍：&quot;&gt;&lt;a href=&quot;#分支介绍：&quot; class=&quot;headerlink&quot; title=&quot;分支介绍：&quot;&gt;&lt;/a&gt;分支介绍：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;feature：功能分支，基于develop分支，用来开发新需求。完成后合并到develop分支。&lt;/li&gt;
&lt;li&gt;release：发布分支，基于develop分支，用于提测后修复bug，通常新功能不在此分支上开发。完成后合并到develop分支和master分支，打Tag。&lt;/li&gt;
&lt;li&gt;develop：不直接在该分支上进行开发，用来合并feature分支的代码。&lt;/li&gt;
&lt;li&gt;master：存放已部署在生产环境的稳定代码，以tag标记版本节点。&lt;/li&gt;
&lt;li&gt;hotfix：修复分支，基于master，用于修复线上紧急bug。完成后合并到develop分支和master分支，打Tag。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;完整的工作流：&quot;&gt;&lt;a href=&quot;#完整的工作流：&quot; class=&quot;headerlink&quot; title=&quot;完整的工作流：&quot;&gt;&lt;/a&gt;完整的工作流：&lt;/h2&gt;&lt;h3 id=&quot;正常流：&quot;&gt;&lt;a href=&quot;#正常流：&quot; class=&quot;headerlink&quot; title=&quot;正常流：&quot;&gt;&lt;/a&gt;正常流：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;接到版本需求&lt;/li&gt;
&lt;li&gt;建立feature分支(以版本号命名分支)，进入开发&lt;/li&gt;
&lt;li&gt;开发完成，准备提测&lt;/li&gt;
&lt;li&gt;禁止feature分支提交代码，完成feature分支，合并代码到develop分支(sourceTree自动合并)&lt;/li&gt;
&lt;li&gt;建立release分支(以版本号命名分支)，在此分支上修复测试bug&lt;/li&gt;
&lt;li&gt;测试完成，准备发布版本&lt;/li&gt;
&lt;li&gt;禁止release分支提交代码，完成release分支，将代码合并到develop分支和master分支(sourceTree自动合并)，打上Tag&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;异常流：&quot;&gt;&lt;a href=&quot;#异常流：&quot; class=&quot;headerlink&quot; title=&quot;异常流：&quot;&gt;&lt;/a&gt;异常流：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;发现线上紧急bug&lt;/li&gt;
&lt;li&gt;从master检出hotfix分支，在此分支上修复bug并提交测试&lt;/li&gt;
&lt;li&gt;测试完成，准备发布修复版本&lt;/li&gt;
&lt;li&gt;禁止hotfix分支提交代码，完成hotfix分支，将代码合并到develop分支和master分支，打上Tag&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;工具：SourceTree&quot;&gt;&lt;a href=&quot;#工具：SourceTree&quot; class=&quot;headerlink&quot; title=&quot;工具：SourceTree&quot;&gt;&lt;/a&gt;工具：SourceTree&lt;/h2&gt;&lt;h3 id=&quot;使用方法：&quot;&gt;&lt;a href=&quot;#使用方法：&quot; class=&quot;headerlink&quot; title=&quot;使用方法：&quot;&gt;&lt;/a&gt;使用方法：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化仓库；建立、完成feature分支；建立、完成release分支；建立、完成hotfix分支&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初尝甜品之Gitflow工作流&quot;&gt;&lt;a href=&quot;#初尝甜品之Gitflow工作流&quot; class=&quot;headerlink&quot; title=&quot;初尝甜品之Gitflow工作流&quot;&gt;&lt;/a&gt;初尝甜品之Gitflow工作流&lt;/h1&gt;&lt;h1 id=&quot;GitFlow工作流：&quot;&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="Gitflow" scheme="http://yoursite.com/tags/Gitflow/"/>
    
  </entry>
  
  <entry>
    <title>HybridKit图片缓存及流量优化方案</title>
    <link href="http://yoursite.com/2017/02/09/HybridKit%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98%E5%8F%8A%E6%B5%81%E9%87%8F%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/02/09/HybridKit图片缓存及流量优化方案/</id>
    <published>2017-02-09T08:39:40.000Z</published>
    <updated>2017-02-09T08:47:03.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HybridKit缓存及流量优化方案&quot;&gt;&lt;a href=&quot;#HybridKit缓存及流量优化方案&quot; class=&quot;headerlink&quot; title=&quot;HybridKit缓存及流量优化方案&quot;&gt;&lt;/a&gt;HybridKit缓存及流量优化方案&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;年前，一直在忙项目上的事情也没时间写些东西，趁现在项目还处于空闲期，写下项目中遇到的优化方案。刚解决完发热问题，用户就开始反馈我们的app超级费流量，领导也非常重视。我们所用的图片服务器是又拍云支持尺寸裁剪，但是裁剪后的储存大小还是不可观。正好又拍云支持WebP图片格式，何不尝试下呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;导致费流量的原因&quot;&gt;&lt;a href=&quot;#导致费流量的原因&quot; class=&quot;headerlink&quot; title=&quot;导致费流量的原因&quot;&gt;&lt;/a&gt;导致费流量的原因&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.HybridKit的UIWebView没有做缓存&lt;/li&gt;
&lt;li&gt;2.又拍云裁剪后的储存大小还是不够可观&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WebP&quot;&gt;&lt;a href=&quot;#WebP&quot; class=&quot;headerlink&quot; title=&quot;WebP&quot;&gt;&lt;/a&gt;WebP&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;WebP（发音 weppy，项目主页），是一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。根据 Google 的测试，无损压缩后的 WebP 比 PNG 文件少了 45％ 的文件大小，即使这些 PNG 文件经过其他压缩工具压缩之后，WebP 还是可以减少 28％ 的文件大小。&lt;/p&gt;
&lt;p&gt;2010 年发布的 WebP 已经不算是新鲜事物了，在 Google 的明星产品如 Youtube、Gmail、Google Play 中都可以看到 WebP 的身影，而 Chrome 网上商店甚至已完全使用了 WebP。国外公司如 Facebook、ebay 和国内公司如腾讯、淘宝、美团等也早已尝鲜。目前 WebP 也在我厂很多的项目中得到应用，如腾讯新闻客户端、腾讯网、QQ空间等，同时也有一些针对 WebP 的图片格式转换工具，如 智图，iSparta 等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;缓存方案&quot;&gt;&lt;a href=&quot;#缓存方案&quot; class=&quot;headerlink&quot; title=&quot;缓存方案&quot;&gt;&lt;/a&gt;缓存方案&lt;/h2&gt;&lt;h3 id=&quot;SDWebImage&quot;&gt;&lt;a href=&quot;#SDWebImage&quot; class=&quot;headerlink&quot; title=&quot;SDWebImage&quot;&gt;&lt;/a&gt;SDWebImage&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;SDWebImage是iOS开发者经常使用的一个开源框架,这个框架的主要作用是：一个异步下载图片并且支持缓存的UIImageView分类。相信各位iOS开发工程师都不会陌生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;WebP集成方法&quot;&gt;&lt;a href=&quot;#WebP集成方法&quot; class=&quot;headerlink&quot; title=&quot;WebP集成方法&quot;&gt;&lt;/a&gt;WebP集成方法&lt;/h3&gt;&lt;p&gt;1.CocoaPods&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;SDWebImage/WebP&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.手动导入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.工程引入SDWebImage开源库；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.引入WebP.framework,下载地址：https://github.com/seanooi/iOS-WebP          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.让SDWebImage支持WebP，设置如下Build Settings -- Preprocessor Macros , add SD_WEBP=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160611233012021?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;NSURLCache&quot;&gt;&lt;a href=&quot;#NSURLCache&quot; class=&quot;headerlink&quot; title=&quot;NSURLCache&quot;&gt;&lt;/a&gt;NSURLCache&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NSURLCache 为应用的 URL 请求提供了内存以及磁盘上的综合缓存机制，作为基础类库 URL 加载的一部分，任何通过 NSURLConnection 加载的请求都将被 NSURLCache 处理。&lt;/li&gt;
&lt;li&gt;网络缓存减少了需要向服务器发送请求的次数，同时也提升了离线或在低速网络中使用应用的体验。&lt;/li&gt;
&lt;li&gt;当一个请求完成下载来自服务器的回应，一个缓存的回应将在本地保存。下一次同一个请求再发起时，本地保存的回应就会马上返回，不需要连接服务器。NSURLCache&lt;br&gt;会 自动 且 透明 地返回回应。&lt;/li&gt;
&lt;li&gt;为了好好利用 NSURLCache，你需要初始化并设置一个共享的 URL 缓存。在 iOS 中这项工作需要在 -application:didFinishLaunchingWithOptions: 完成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSURLCache *URLCache = [[NSURLCache alloc] initWithMemoryCapacity:4 * 1024 * 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                       diskCapacity:20 * 1024 * 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                           diskPath:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [NSURLCache setSharedURLCache:URLCache];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;NSURLProtocol&quot;&gt;&lt;a href=&quot;#NSURLProtocol&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol&quot;&gt;&lt;/a&gt;NSURLProtocol&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;NSURLProtocol可以拦截监听每一个URL Loading System中发出request请求，记住是URL Loading System中那些类发出的请求，也支持AFNetwoking，UIWebView发出的request。如果不是这些类发出的请求，NSURLProtocol就没办法拦截和监听了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之所以使用NSURLProtocol而不使用NSURLCache的原因是：NSURLProtocol可以拦截UIWebView发出的图片请求，如果检测到时又拍云图片链接，会把请求图片地址更改为WebP格式并使用SDWebImageDownloader来进行图片加载，这是NSURLCache不能实现的。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;1.在AppDelegate的-application:didFinishLaunchingWithOptions:方法中进行注册，这样NSURLProtocol才会正常工作。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;type&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;type&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;type&quot;&gt;BFNSURLProtocol&lt;/span&gt; registerClass:[&lt;span class=&quot;type&quot;&gt;BFNSURLProtocol&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.WebView 图片请求替换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;webkit内核现在都不支持解析WebP格式的图片，这里主要采用的iOS系统的NSURLProtocol来替换其网络请求（不了解NSURLProtocol，可以动动自己勤劳的小手Google一下），再将网络回包数据进行转码成jpg或者png（为了透明度），再返回给webview进行渲染的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，NSURLProtocol会拦截全局的网络流量，为避免误伤，这里需要单独识别是否是WebView发起的请求，可以通过识别request中的UA是否包含”AppleWebKit”来实现。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation &lt;span class=&quot;type&quot;&gt;BFNSURLProtocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt;)canInitWithRequest:(&lt;span class=&quot;type&quot;&gt;NSURLRequest&lt;/span&gt; *)request &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 屏蔽非又拍云地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([[request.&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt; absoluteString] rangeOfString:@&lt;span class=&quot;string&quot;&gt;&quot;upaiyun&quot;&lt;/span&gt;].location == &lt;span class=&quot;type&quot;&gt;NSNotFound&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//只处理http和https请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *scheme = [[request &lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;] scheme];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (([scheme caseInsensitiveCompare:@&lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;] == &lt;span class=&quot;type&quot;&gt;NSOrderedSame&lt;/span&gt; || [scheme caseInsensitiveCompare:@&lt;span class=&quot;string&quot;&gt;&quot;https&quot;&lt;/span&gt;] == &lt;span class=&quot;type&quot;&gt;NSOrderedSame&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//看看是否已经处理过了，防止无限循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;type&quot;&gt;NSURLProtocol&lt;/span&gt; propertyForKey:&lt;span class=&quot;type&quot;&gt;URLProtocolHandledKey&lt;/span&gt; inRequest:request]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *agent = [request valueForHTTPHeaderField:@&lt;span class=&quot;string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 只过滤UIWebview里边的加载图片请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([agent rangeOfString:@&lt;span class=&quot;string&quot;&gt;&quot;AppleWebKit&quot;&lt;/span&gt;].location != &lt;span class=&quot;type&quot;&gt;NSNotFound&lt;/span&gt; &amp;amp;&amp;amp; [request.&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt; isImageURL]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;敲黑板，划重点了！划重点了！划重点了！（重要的事情说三遍）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里可以接管所有WebView中需要替换的图片URL。&lt;/p&gt;
&lt;p&gt;下面，会自动调用startLoading方法，利用SDWebImageManager来加载WebP图片，不仅能实现WebP的省流量功能，还能将图片缓存在本地，下次加载同一图片地址的时候又达到了省流量的目的。耶！~&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)startLoading &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSMutableURLRequest&lt;/span&gt; *mutableReqeust = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; request] mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//标示改request已经处理过了，防止无限循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;type&quot;&gt;NSURLProtocol&lt;/span&gt; setProperty:@&lt;span class=&quot;type&quot;&gt;YES&lt;/span&gt; forKey:&lt;span class=&quot;type&quot;&gt;URLProtocolHandledKey&lt;/span&gt; inRequest:mutableReqeust];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.request.&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt; absoluteString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 重定义请求地址 将format为jpg改为webp格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; rangeOfString:@&lt;span class=&quot;string&quot;&gt;&quot;format&quot;&lt;/span&gt;].location == &lt;span class=&quot;type&quot;&gt;NSNotFound&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; = [[&lt;span class=&quot;type&quot;&gt;BFWebImageHelper&lt;/span&gt; imageStringToURL:&lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; width:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; height:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] absoluteString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; rangeOfString:@&lt;span class=&quot;string&quot;&gt;&quot;format/jpg&quot;&lt;/span&gt;].location != &lt;span class=&quot;type&quot;&gt;NSNotFound&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; = [[&lt;span class=&quot;type&quot;&gt;BFWebImageHelper&lt;/span&gt; imageStringToURL:&lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt; width:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; height:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] absoluteString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.connection = [&lt;span class=&quot;type&quot;&gt;NSURLConnection&lt;/span&gt; connectionWithRequest:mutableReqeust delegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;URLWithString&lt;/span&gt;:&lt;span class=&quot;type&quot;&gt;URLString&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;type&quot;&gt;SDWebImageManager&lt;/span&gt; sharedManager] downloadImageWithURL:url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                    options:&lt;span class=&quot;type&quot;&gt;SDWebImageAllowInvalidSSLCertificates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   progress:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  completed:^(&lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt; *image, &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; *error, &lt;span class=&quot;type&quot;&gt;SDImageCacheType&lt;/span&gt; cacheType, &lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt; finished, &lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt; *imageURL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt; *data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &lt;span class=&quot;comment&quot;&gt;// 是否以png结尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([imageURL.absoluteString.lowercaseString hasSuffix:@&lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          data = &lt;span class=&quot;type&quot;&gt;UIImagePNGRepresentation&lt;/span&gt;(image);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          data = &lt;span class=&quot;type&quot;&gt;UIImageJPEGRepresentation&lt;/span&gt;(image, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client &lt;span class=&quot;type&quot;&gt;URLProtocol&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didLoadData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client &lt;span class=&quot;type&quot;&gt;URLProtocolDidFinishLoading&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)stopLoading &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.connection cancel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.connection = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;type&quot;&gt;NSURLRequest&lt;/span&gt; *)canonicalRequestForRequest:(&lt;span class=&quot;type&quot;&gt;NSURLRequest&lt;/span&gt; *)request &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSMutableURLRequest&lt;/span&gt; *mutableReqeust = [request mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutableReqeust = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; redirectHostInRequset:mutableReqeust];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mutableReqeust;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt;)requestIsCacheEquivalent:(&lt;span class=&quot;type&quot;&gt;NSURLRequest&lt;/span&gt; *)equivalent toRequest:(&lt;span class=&quot;type&quot;&gt;NSURLRequest&lt;/span&gt; *)request; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; requestIsCacheEquivalent:equivalent toRequest:request];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;type&quot;&gt;NSMutableURLRequest&lt;/span&gt; *)redirectHostInRequset:(&lt;span class=&quot;type&quot;&gt;NSMutableURLRequest&lt;/span&gt; *)request &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; request;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他代理&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - &lt;span class=&quot;type&quot;&gt;NSURLConnectionDataDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求响应时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)connection:(&lt;span class=&quot;type&quot;&gt;NSURLConnection&lt;/span&gt; *)connection didReceiveResponse:(&lt;span class=&quot;type&quot;&gt;NSURLResponse&lt;/span&gt; *)response &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client &lt;span class=&quot;type&quot;&gt;URLProtocol&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didReceiveResponse:response cacheStoragePolicy:&lt;span class=&quot;type&quot;&gt;NSURLCacheStorageNotAllowed&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求接收数据时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)connection:(&lt;span class=&quot;type&quot;&gt;NSURLConnection&lt;/span&gt; *)connection didReceiveData:(&lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt; *)data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client &lt;span class=&quot;type&quot;&gt;URLProtocol&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didLoadData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求完成的代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)connectionDidFinishLoading:(&lt;span class=&quot;type&quot;&gt;NSURLConnection&lt;/span&gt; *)connection &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client &lt;span class=&quot;type&quot;&gt;URLProtocolDidFinishLoading&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求失败&amp;amp;错误的代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)connection:(&lt;span class=&quot;type&quot;&gt;NSURLConnection&lt;/span&gt; *)connection didFailWithError:(&lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; *)error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.client &lt;span class=&quot;type&quot;&gt;URLProtocol&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didFailWithError:error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：流程图&lt;br&gt;&lt;a href=&quot;https://www.processon.com/view/link/589c29abe4b0a17827f86f32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;流程图链接processon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在使用了Webp之后，经QA同事的多次测试，同样一套步骤下比未优化前流量节省了47%，使用NSURLProtocol缓存方案后，在WebP优化基础上又优化了12%的流量。其实NSURLProtocol的功能远远不止这些，NSURLProtocol就是一个黑魔法，有兴趣的童鞋可以深入研究一下。今天就写到这里吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HybridKit缓存及流量优化方案&quot;&gt;&lt;a href=&quot;#HybridKit缓存及流量优化方案&quot; class=&quot;headerlink&quot; title=&quot;HybridKit缓存及流量优化方案&quot;&gt;&lt;/a&gt;HybridKit缓存及流量优化方案&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>直播解决方案整理</title>
    <link href="http://yoursite.com/2017/02/09/%E7%9B%B4%E6%92%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/02/09/直播解决方案整理/</id>
    <published>2017-02-09T03:12:46.000Z</published>
    <updated>2017-02-09T03:13:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;直播云解决方案整理&quot;&gt;&lt;a href=&quot;#直播云解决方案整理&quot; class=&quot;headerlink&quot; title=&quot;直播云解决方案整理&quot;&gt;&lt;/a&gt;直播云解决方案整理&lt;/h1&gt;&lt;h2 id=&quot;TOC&quot;&gt;&lt;a href=&quot;#TOC&quot; class=&quot;headerlink&quot; title=&quot;[TOC]&quot;&gt;&lt;/a&gt;[TOC]&lt;/h2&gt;&lt;h2 id=&quot;1-又拍云直播&quot;&gt;&lt;a href=&quot;#1-又拍云直播&quot; class=&quot;headerlink&quot; title=&quot;1.又拍云直播&quot;&gt;&lt;/a&gt;1.又拍云直播&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;又拍直播云（UPLive），基于又拍云内容分发网络为直播应用提供超低延迟、高码率、高并发的从推流端到播放端的一站式解决方案，支持 RTMP、HTTP-FLV 和 HLS 输出等基本功能，包括录制、转码等增值服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;IOS-推流-SDK&quot;&gt;&lt;a href=&quot;#IOS-推流-SDK&quot; class=&quot;headerlink&quot; title=&quot;IOS 推流 SDK&quot;&gt;&lt;/a&gt;IOS 推流 SDK&lt;/h3&gt;&lt;h3 id=&quot;系统说明&quot;&gt;&lt;a href=&quot;#系统说明&quot; class=&quot;headerlink&quot; title=&quot;系统说明&quot;&gt;&lt;/a&gt;系统说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;支持 iOS 8 及以上系统版本 &lt;/li&gt;
&lt;li&gt;支持 ARMv7，ARM64，x86_64 架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;功能说明&quot;&gt;&lt;a href=&quot;#功能说明&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;采集模块源码开放，音视频可以自由配置 &lt;/li&gt;
&lt;li&gt;支持硬件编码 &lt;/li&gt;
&lt;li&gt;多码率可选 &lt;/li&gt;
&lt;li&gt;支持 H.264 视频编码 &lt;/li&gt;
&lt;li&gt;支持 AAC 音频编码 &lt;/li&gt;
&lt;li&gt;支持前后摄像头 &lt;/li&gt;
&lt;li&gt;支持自动对焦 &lt;/li&gt;
&lt;li&gt;支持手动调整对焦点 &lt;/li&gt;
&lt;li&gt;支持闪光灯操作 &lt;/li&gt;
&lt;li&gt;支持多分辨率编码 &lt;/li&gt;
&lt;li&gt;支持构造带安全授权凭证的 RTMP 推流地址 &lt;/li&gt;
&lt;li&gt;支持 ARMv7, ARM64, x86_64 架构 &lt;/li&gt;
&lt;li&gt;支持 RTMP 协议直播推流 &lt;/li&gt;
&lt;li&gt;支持推流时可变码率 &lt;/li&gt;
&lt;li&gt;提供发送 buffer &lt;/li&gt;
&lt;li&gt;支持视频 Orientation 操作 &lt;/li&gt;
&lt;li&gt;支持弱网丢帧策略 &lt;/li&gt;
&lt;li&gt;支持后台音频推流 &lt;/li&gt;
&lt;li&gt;支持水印功能 &lt;/li&gt;
&lt;li&gt;支持美颜功能 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/upyun/ios-live-sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安卓推流-SDK&quot;&gt;&lt;a href=&quot;#安卓推流-SDK&quot; class=&quot;headerlink&quot; title=&quot;安卓推流 SDK&quot;&gt;&lt;/a&gt;安卓推流 SDK&lt;/h3&gt;&lt;h4 id=&quot;系统说明-1&quot;&gt;&lt;a href=&quot;#系统说明-1&quot; class=&quot;headerlink&quot; title=&quot;系统说明&quot;&gt;&lt;/a&gt;系统说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Android 4.1(API 16) 以上&lt;/li&gt;
&lt;li&gt;支持 ARMv5，ARMv7，ARMv8 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;功能说明-1&quot;&gt;&lt;a href=&quot;#功能说明-1&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;支持 H.264 和 AAC 硬编&lt;/li&gt;
&lt;li&gt;硬编支持 Android Min API 18（Android 4.3）及其以上版本&lt;/li&gt;
&lt;li&gt;支持 RTMP 封包及推流&lt;/li&gt;
&lt;li&gt;支持 RTMP 推流自适应网络质量动态切换码率或自定义策略&lt;/li&gt;
&lt;li&gt;支持纯音频推流，以及后台运行&lt;/li&gt;
&lt;li&gt;支持动态更改 Encoding Orientation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/upyun/android-push-sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;IOS-播放器-SDK&quot;&gt;&lt;a href=&quot;#IOS-播放器-SDK&quot; class=&quot;headerlink&quot; title=&quot;IOS 播放器 SDK&quot;&gt;&lt;/a&gt;IOS 播放器 SDK&lt;/h3&gt;&lt;h4 id=&quot;系统说明-2&quot;&gt;&lt;a href=&quot;#系统说明-2&quot; class=&quot;headerlink&quot; title=&quot;系统说明&quot;&gt;&lt;/a&gt;系统说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;支持 iOS 8 及以上系统版本 &lt;/li&gt;
&lt;li&gt;支持 ARMv7，ARM64，x86_64 架构 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;功能说明-2&quot;&gt;&lt;a href=&quot;#功能说明-2&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;支持 RTMP 、HLS 和 HTTP-FLV 协议的直播流媒体播放&lt;/li&gt;
&lt;li&gt;高可定制：可自定义尺寸，按钮，进度条，全屏，旋转等 UI 属性&lt;/li&gt;
&lt;li&gt;支持单音频播放&lt;/li&gt;
&lt;li&gt;支持 RTMP 直播首屏秒开&lt;/li&gt;
&lt;li&gt;RTMP 直播累积延迟消除技术&lt;/li&gt;
&lt;li&gt;支持 speex 解码&lt;/li&gt;
&lt;li&gt;音画同步调整&lt;/li&gt;
&lt;li&gt;一屏多画&lt;/li&gt;
&lt;li&gt;点播支持&lt;/li&gt;
&lt;li&gt;支持 seek 功能&lt;/li&gt;
&lt;li&gt;视频缓冲设置，缓冲进度&lt;/li&gt;
&lt;li&gt;支持预连接，后播放功能&lt;/li&gt;
&lt;li&gt;集成亮度调整和音量调整&lt;/li&gt;
&lt;li&gt;支持静音播放&lt;/li&gt;
&lt;li&gt;支持播放器状态回调&lt;/li&gt;
&lt;li&gt;支持流信息，播放器信息察看（Dashboard）&lt;/li&gt;
&lt;li&gt;支持播放本地视频文件&lt;/li&gt;
&lt;li&gt;集成播放质量监控 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/upyun/ios-live-sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安卓播放器-SDK&quot;&gt;&lt;a href=&quot;#安卓播放器-SDK&quot; class=&quot;headerlink&quot; title=&quot;安卓播放器 SDK&quot;&gt;&lt;/a&gt;安卓播放器 SDK&lt;/h3&gt;&lt;h4 id=&quot;系统说明-3&quot;&gt;&lt;a href=&quot;#系统说明-3&quot; class=&quot;headerlink&quot; title=&quot;系统说明&quot;&gt;&lt;/a&gt;系统说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Android 2.3 (API 9) 及其以上&lt;/li&gt;
&lt;li&gt;支持 ARMv5，ARMv7，ARMv8 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;功能说明-3&quot;&gt;&lt;a href=&quot;#功能说明-3&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;支持 RTMP 、HLS 和 HTTP-FLV 协议的直播流媒体播放&lt;/li&gt;
&lt;li&gt;支持常见的音视频文件播放（MP4、M4A、FLV 等）&lt;/li&gt;
&lt;li&gt;支持 MediaCodec 硬件解码&lt;/li&gt;
&lt;li&gt;提供播放器核心类 PLMediaPlayer&lt;/li&gt;
&lt;li&gt;提供 PLVideoView 控件&lt;/li&gt;
&lt;li&gt;支持播放器音量设置，可实现静音功能&lt;/li&gt;
&lt;li&gt;支持纯音频播放&lt;/li&gt;
&lt;li&gt;支持直播累积延时优化&lt;/li&gt;
&lt;li&gt;支持 ARM，ARMv7a，ARM64v8a，X86 主流芯片体系架构&lt;/li&gt;
&lt;li&gt;可高度定制化的 MediaController&lt;/li&gt;
&lt;li&gt;高可定制：可自定义尺寸，按钮，进度条，全屏，旋转等 UI 属性&lt;/li&gt;
&lt;li&gt;单音频播放&lt;/li&gt;
&lt;li&gt;RTMP 直播首屏秒开支持&lt;/li&gt;
&lt;li&gt;RTMP 直播累积延迟消除技术&lt;/li&gt;
&lt;li&gt;支持 speex 解码&lt;/li&gt;
&lt;li&gt;音画同步调整&lt;/li&gt;
&lt;li&gt;支持点播&lt;/li&gt;
&lt;li&gt;支持 seek 功能&lt;/li&gt;
&lt;li&gt;视频缓冲设置，缓冲进度&lt;/li&gt;
&lt;li&gt;支持预连接，后播放功能&lt;/li&gt;
&lt;li&gt;集成亮度调整和音量调整&lt;/li&gt;
&lt;li&gt;支持静音播放&lt;/li&gt;
&lt;li&gt;支持播放器状态回调&lt;/li&gt;
&lt;li&gt;支持流信息，播放器信息察看（Dashboard）&lt;/li&gt;
&lt;li&gt;支持播放本地视频文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/upyun/android-player-sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;产品价格&quot;&gt;&lt;a href=&quot;#产品价格&quot; class=&quot;headerlink&quot; title=&quot;产品价格&quot;&gt;&lt;/a&gt;产品价格&lt;/h3&gt;&lt;p&gt;详见&lt;a href=&quot;https://www.upyun.com/price.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;合作案例&quot;&gt;&lt;a href=&quot;#合作案例&quot; class=&quot;headerlink&quot; title=&quot;合作案例&quot;&gt;&lt;/a&gt;合作案例&lt;/h3&gt;&lt;p&gt;无&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-七牛云直播&quot;&gt;&lt;a href=&quot;#2-七牛云直播&quot; class=&quot;headerlink&quot; title=&quot;2.七牛云直播&quot;&gt;&lt;/a&gt;2.七牛云直播&lt;/h2&gt;&lt;h3 id=&quot;iOS-推流端-SDK&quot;&gt;&lt;a href=&quot;#iOS-推流端-SDK&quot; class=&quot;headerlink&quot; title=&quot;iOS 推流端 SDK&quot;&gt;&lt;/a&gt;iOS 推流端 SDK&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PLMediaStreamingKit 是一个适用于 iOS 的 RTMP 直播推流 SDK，可高度定制化和二次开发。SDK 提供 RTMP 推流的全套解决方案，包括采集，处理（美颜，水印等），编码，封包，发送。特色是支持 H.264 硬编码，以及支持 AAC-LC 硬编码的同时，还根据移动网络环境的多变性，实现了一套可供开发者灵活选择的编码参数集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;硬件编码&lt;/li&gt;
&lt;li&gt;支持美颜，以及调节磨皮、美白、红润效果&lt;/li&gt;
&lt;li&gt;添加水印&lt;/li&gt;
&lt;li&gt;多码率可选&lt;/li&gt;
&lt;li&gt;H.264 视频编码&lt;/li&gt;
&lt;li&gt;AAC 音频编码&lt;/li&gt;
&lt;li&gt;支持多分辨率编码&lt;/li&gt;
&lt;li&gt;支持 HeaderDoc 文档&lt;/li&gt;
&lt;li&gt;内置生成安全的 RTMP 推流地址&lt;/li&gt;
&lt;li&gt;支持 ARM64&lt;/li&gt;
&lt;li&gt;支持 RTMP 协议直播推流&lt;/li&gt;
&lt;li&gt;音视频配置分离&lt;/li&gt;
&lt;li&gt;推流时可变码率&lt;/li&gt;
&lt;li&gt;提供发送 buffer&lt;/li&gt;
&lt;li&gt;后台推流&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iOS-播放端-SDK&quot;&gt;&lt;a href=&quot;#iOS-播放端-SDK&quot; class=&quot;headerlink&quot; title=&quot;iOS 播放端 SDK&quot;&gt;&lt;/a&gt;iOS 播放端 SDK&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PLPlayerKit 是一个适用于 iOS 的 HLS 及 RTMP 播放 SDK，可高度定制化和二次开发。特色是支持 RTMP 协议下 H.264 编码 FLV 封装的多媒体流的播放，针对与用户体验密切相关的首开缓冲时间进行了优化，另外还根据移动网络的多变性以及直播场景对播放实时性的需求提供了跳帧机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;特性-1&quot;&gt;&lt;a href=&quot;#特性-1&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;高可定制&lt;/li&gt;
&lt;li&gt;直播累积延迟消除技术&lt;/li&gt;
&lt;li&gt;支持首屏秒开&lt;/li&gt;
&lt;li&gt;支持 RTMP 直播流播放&lt;/li&gt;
&lt;li&gt;支持 HTTP-FLV 直播流播放&lt;/li&gt;
&lt;li&gt;支持 HLS 播放&lt;/li&gt;
&lt;li&gt;支持 HTTPS 播放&lt;/li&gt;
&lt;li&gt;支持多种画面预览模式&lt;/li&gt;
&lt;li&gt;支持画面旋转与镜像&lt;/li&gt;
&lt;li&gt;支持播放器音量设置&lt;/li&gt;
&lt;li&gt;支持纯音频播放&lt;/li&gt;
&lt;li&gt;支持后台播放&lt;/li&gt;
&lt;li&gt;支持使用 IP 地址的 URL&lt;/li&gt;
&lt;li&gt;支持软硬解自动切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;费用&quot;&gt;&lt;a href=&quot;#费用&quot; class=&quot;headerlink&quot; title=&quot;费用&quot;&gt;&lt;/a&gt;费用&lt;/h3&gt;&lt;p&gt;服务价格等详细信息您可以联系：sales@qiniu.com，或者直接登录您的七牛账号选择申请开通直播服务，会有专人与您联系。&lt;/p&gt;
&lt;h3 id=&quot;合作案例-1&quot;&gt;&lt;a href=&quot;#合作案例-1&quot; class=&quot;headerlink&quot; title=&quot;合作案例&quot;&gt;&lt;/a&gt;合作案例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PandaTV &lt;/li&gt;
&lt;li&gt;懂球帝&lt;/li&gt;
&lt;li&gt;美拍 &lt;/li&gt;
&lt;li&gt;大神TV&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-阿里云直播&quot;&gt;&lt;a href=&quot;#3-阿里云直播&quot; class=&quot;headerlink&quot; title=&quot;3.阿里云直播&quot;&gt;&lt;/a&gt;3.阿里云直播&lt;/h2&gt;&lt;h3 id=&quot;iOS-播放端-SDK-1&quot;&gt;&lt;a href=&quot;#iOS-播放端-SDK-1&quot; class=&quot;headerlink&quot; title=&quot;iOS 播放端 SDK&quot;&gt;&lt;/a&gt;iOS 播放端 SDK&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;AlivcMediaPlayer是一款基于IOS平台的多媒体视频播放SDK。它为IOS的开发者提供了简单易用的接口，帮助开发者方便快捷、低门槛的实现多媒体播放功能的开发。它支持HLS、RTMP、HTTP FLV、MP4等多种流媒体播放格式，视频支持h264格式、音频支持AAC格式。另外，针对直播用户的需求，还增加了首帧秒开的功能；同时为了减少直播的延迟，增加了弱网条件下播放的跳帧功能。&lt;br&gt;版本和新增功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;特性-2&quot;&gt;&lt;a href=&quot;#特性-2&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;支持HLS、RTMP、HTTP FLV、mp4等流格式&lt;/li&gt;
&lt;li&gt;支持h264+aac&lt;/li&gt;
&lt;li&gt;支持armv7、arm64    v2.0&lt;/li&gt;
&lt;li&gt;支持直播首帧秒开 &lt;/li&gt;
&lt;li&gt;支持弱网条件下的丢帧策略&lt;/li&gt;
&lt;li&gt;支持多实例、支持模拟器调试，支持https &lt;/li&gt;
&lt;li&gt;支持带切边的视频渲染模式&lt;/li&gt;
&lt;li&gt;支持苹果2017年1月1号后强制使用HTTPS的要求    v2.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iOS-推流端-SDK-1&quot;&gt;&lt;a href=&quot;#iOS-推流端-SDK-1&quot; class=&quot;headerlink&quot; title=&quot;iOS 推流端 SDK&quot;&gt;&lt;/a&gt;iOS 推流端 SDK&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;iOS推流SDK是在iOS平台上使用的软件开发工具包(Soft Development Kit)，为iOS开发者提供简单易用的接口，帮助开发者实现iOS平台上的推流应用开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;功能说明-4&quot;&gt;&lt;a href=&quot;#功能说明-4&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方便快捷、低门槛实现媒体推流功能。用户无须关心内部实现细节，只需要自定义界面既可以实现专业级的推流应用。 &lt;/li&gt;
&lt;li&gt;推流支持格式：rtmp&lt;/li&gt;
&lt;li&gt;编码目前为硬编&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;费用-1&quot;&gt;&lt;a href=&quot;#费用-1&quot; class=&quot;headerlink&quot; title=&quot;费用&quot;&gt;&lt;/a&gt;费用&lt;/h3&gt;&lt;h4 id=&quot;直播峰值带宽计费说明：&quot;&gt;&lt;a href=&quot;#直播峰值带宽计费说明：&quot; class=&quot;headerlink&quot; title=&quot;直播峰值带宽计费说明：&quot;&gt;&lt;/a&gt;直播峰值带宽计费说明：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;直播峰值带宽阶梯&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;价格（元/Mbps/日）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0-500Mbps（含）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;500Mbps-5Gbps（含）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;大于5Gbps&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.76&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;费用 = [500 x 1.00 + (5000-500) x 0.90 + (A-5000) x 0.76]&lt;/p&gt;
&lt;h4 id=&quot;直播转码计费说明：&quot;&gt;&lt;a href=&quot;#直播转码计费说明：&quot; class=&quot;headerlink&quot; title=&quot;直播转码计费说明：&quot;&gt;&lt;/a&gt;直播转码计费说明：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;直播转码规格（H.264）&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;价格（元/分钟）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;480P（含）及以下&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.0675&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;480P-720P（含）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.133&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;720P-1080P（含）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.266&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;详情&lt;a href=&quot;https://cn.aliyun.com/price/product#/live/detail&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;合作案例-2&quot;&gt;&lt;a href=&quot;#合作案例-2&quot; class=&quot;headerlink&quot; title=&quot;合作案例&quot;&gt;&lt;/a&gt;合作案例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;芒果TV &lt;/li&gt;
&lt;li&gt;映客&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;4-腾讯云直播&quot;&gt;&lt;a href=&quot;#4-腾讯云直播&quot; class=&quot;headerlink&quot; title=&quot;4.腾讯云直播&quot;&gt;&lt;/a&gt;4.腾讯云直播&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;移动直播（Mobile Live Video Broadcasting）是腾讯云直播服务(LVB) 在手机直播方向的延伸，相比于主要面向云对接的直播(LVB) 服务，移动直播（MLVB）即提供了基于 RTMP SDK 的“快速集成方案”，也提供了集直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS) 等多云端服务与一体的“一体化解决方案”，且不收取除流量之外的额外费用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;iOS-推流端-SDK-2&quot;&gt;&lt;a href=&quot;#iOS-推流端-SDK-2&quot; class=&quot;headerlink&quot; title=&quot;iOS 推流端 SDK&quot;&gt;&lt;/a&gt;iOS 推流端 SDK&lt;/h3&gt;&lt;h4 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h4&gt;&lt;p&gt;推流（也叫发布）是指将音视频数据采集编码之后，推送到您指定的视频云平台上，这里涉及大量的音视频基础知识，而且需要长时间的打磨和优化才能达到符合预期的效果。&lt;/p&gt;
&lt;p&gt;腾讯云 RTMP SDK 主要帮您解决在智能手机上的推流问题，它的接口非常简单易用，只需要一个推流URL就能驱动：&lt;br&gt;&lt;img src=&quot;http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/pusher_demo_introduction_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;特别说明&quot;&gt;&lt;a href=&quot;#特别说明&quot; class=&quot;headerlink&quot; title=&quot;特别说明&quot;&gt;&lt;/a&gt;特别说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不限制云服务商&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;RTMP SDK 不会限制您向非腾讯云地址推流，但如何才能推流到非腾讯云地址呢？&lt;/p&gt;
&lt;p&gt;为解决国内 DNS 映射不准确的问题，SDK 1.5.2 版本开始引入就近选路，即通过腾讯云就近选路服务器选择离主播最优的推流线路，这一改进对推流质量提升很大。但相应的，选路结果中只有腾讯云的服务器地址。而且，由于我们大量的客户采用专属推流域名，SDK 无法简单通过 URL 文本分析就辨别出是不是推到腾讯云。&lt;/p&gt;
&lt;p&gt;所以，如果您需要推流到其他云商的推流地址，可以通过客服联系我们，我们可以为您的账号关闭就近选路。该项配置通过云控实现，故您不需要发布新的客户端版本来解决这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;x86 模拟器调试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于RTMP SDK大量使用iOS系统的高级特性，我们不能保证所有特性在x86环境的模拟器下都能正常运行，而且音视频是性能敏感的功能，模拟器下的表现跟真机会有很大的不同。所以，如果条件允许，推荐您尽量使用真机调试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;iOS-播放端-SDK-2&quot;&gt;&lt;a href=&quot;#iOS-播放端-SDK-2&quot; class=&quot;headerlink&quot; title=&quot;iOS 播放端 SDK&quot;&gt;&lt;/a&gt;iOS 播放端 SDK&lt;/h3&gt;&lt;h4 id=&quot;基础知识-1&quot;&gt;&lt;a href=&quot;#基础知识-1&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h4&gt;&lt;p&gt;RTMP SDK 包含推流和播放两方面功能，推流为主播端功能，播放（分为直播和点播）为观众端功能。对接之前，我们先列表如下一些基本知识会大有裨益：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直播和点播&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直播 的视频源是实时生成的，有人推流直播才有意义。所以，一旦主播停播，直播URL也就进失效了，而且由于是实时直播，所以播放器在播直播视频的时候是没有进度条的。&lt;/p&gt;
&lt;p&gt;点播 的视频源是云端的一个文件，文件只要没有被提供方删除，就随时可以播放， 而且由于整个视频都在服务器上，所以播放的时候是有进度条的哦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常使用的直播协议如下，APP端推荐使用 FLV 协议的直播地址(以“http”打头，以“.flv”结尾)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/94c348ff7f854b481cdab7f5ba793921/image.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通常使用的点播协议如下，现在比较流行的是HLS(以“http”打头，以“.m3u8”结尾)的点播地址：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/4b42a00bb7ce2f58f362f35397734177/image.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;特别说明-1&quot;&gt;&lt;a href=&quot;#特别说明-1&quot; class=&quot;headerlink&quot; title=&quot;特别说明&quot;&gt;&lt;/a&gt;特别说明&lt;/h4&gt;&lt;p&gt;腾讯云 RTMP SDK 不对 播放地址的来源做限制，即您可以用它来播放腾讯云或非腾讯云的播放地址。但 RTMP SDK 中的播放器只支持 FLV 、RTMP 和 HLS（m3u8）三种格式的直播地址，以及 FLV 、MP4 和 HLS（m3u8）三种格式的点播地址。&lt;/p&gt;
&lt;h4 id=&quot;价格总览&quot;&gt;&lt;a href=&quot;#价格总览&quot; class=&quot;headerlink&quot; title=&quot;价格总览&quot;&gt;&lt;/a&gt;价格总览&lt;/h4&gt;&lt;p&gt;移动直播本身不是一项独立的云服务，所以费用全部源自其依赖的如下几项基础云服务，没有自身的额外费用：&lt;/p&gt;
&lt;h5 id=&quot;直播云服务（LVB）&quot;&gt;&lt;a href=&quot;#直播云服务（LVB）&quot; class=&quot;headerlink&quot; title=&quot;直播云服务（LVB）&quot;&gt;&lt;/a&gt;直播云服务（LVB）&lt;/h5&gt;&lt;p&gt;移动直播本身就是围绕直播的手机直播解决方案，所以直播服务的开通是前提：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;套餐列表&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;直播流量（下行）&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;价格（元）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19元套餐包&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;免费&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;49元套餐包&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;95元套餐包&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;470元套餐包&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;500G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;470&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;939元套餐包&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1T&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;939&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：套餐有限期1年，超出套餐部分按照1.1元／G计算，月结周期内续订套餐可抵消超出流量。 详情&lt;a href=&quot;https://www.qcloud.com/document/product/454/7880&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网站&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;案例：&quot;&gt;&lt;a href=&quot;#案例：&quot; class=&quot;headerlink&quot; title=&quot;案例：&quot;&gt;&lt;/a&gt;案例：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;企鹅电竞&lt;/li&gt;
&lt;li&gt;东方财富&lt;/li&gt;
&lt;li&gt;美团 &lt;/li&gt;
&lt;li&gt;唯品会&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;5-金山云直播&quot;&gt;&lt;a href=&quot;#5-金山云直播&quot; class=&quot;headerlink&quot; title=&quot;5.金山云直播&quot;&gt;&lt;/a&gt;5.金山云直播&lt;/h2&gt;&lt;h4 id=&quot;产品功能&quot;&gt;&lt;a href=&quot;#产品功能&quot; class=&quot;headerlink&quot; title=&quot;产品功能&quot;&gt;&lt;/a&gt;产品功能&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;输入：RTMP；&lt;/li&gt;
&lt;li&gt;输出：RTMP，HDL( HTTP+FLV )，HLS；支持多屏播放，在线实时转码&lt;/li&gt;
&lt;li&gt;多IP集群，主热备方案， 7X24小时无故障服务; 可根据用户业务自动扩展&lt;/li&gt;
&lt;li&gt;智能CDN调度，直播延迟1-3;SDeviceAPI,多平台客户端SDK接入&lt;/li&gt;
&lt;li&gt;防盗链（签名，过期时间），DRM加密，确保流媒体数据安全；99.9% SLA保证&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;播放器SDK-IOS&quot;&gt;&lt;a href=&quot;#播放器SDK-IOS&quot; class=&quot;headerlink&quot; title=&quot;播放器SDK IOS&quot;&gt;&lt;/a&gt;播放器SDK IOS&lt;/h3&gt;&lt;h4 id=&quot;产品概述&quot;&gt;&lt;a href=&quot;#产品概述&quot; class=&quot;headerlink&quot; title=&quot;产品概述&quot;&gt;&lt;/a&gt;产品概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;金山云播放内核涵盖Android、iOS、Flash和浏览器插件四个平台，基于FFmpeg自主研发音视频媒体播放内核，作为一款全平台兼容的软件播放方案，金山云播放内核提供了跨终端平台的播放器SDK，以及开放的音视频播放、控制接口和完整的开源调用示例，不仅极大降低开发门槛，同时支持客户快速在多个平台发布产品。 KSY MediaPlayer iOS SDK是金山云播放内核官方推出的iOS平台上使用的软件开发工具包(SDK)，为iOS开发者提供简单、快捷的接口，帮助开发者实现iOS平台上的多媒体播放应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;KSYMediaPlayer-SDK-功能说明&quot;&gt;&lt;a href=&quot;#KSYMediaPlayer-SDK-功能说明&quot; class=&quot;headerlink&quot; title=&quot;KSYMediaPlayer SDK 功能说明&quot;&gt;&lt;/a&gt;KSYMediaPlayer SDK 功能说明&lt;/h4&gt;&lt;p&gt;与系统播放器MPMoviePlayerController接口一致，可以无缝快速切换至KSYMediaPlayer；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地全媒体格式支持, 并对主流的媒体格式(mp4, avi, wmv, flv, mkv, mov, rmvb 等 )进行优化；&lt;/li&gt;
&lt;li&gt;支持广泛的流式视频格式, HLS, RTMP, HTTP Rseudo-Streaming 等；&lt;/li&gt;
&lt;li&gt;低延时直播体验，配合金山云推流sdk，可以达到全程直播稳定的4秒内延时；&lt;/li&gt;
&lt;li&gt;实现快速满屏播放，为用户带来更快捷优质的播放体验；&lt;/li&gt;
&lt;li&gt;版本适配支持iOS 7.0以上版本；&lt;/li&gt;
&lt;li&gt;业内一流的H.265解码；&lt;/li&gt;
&lt;li&gt;小于2M大小的超轻量级直播sdk；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;/h4&gt;&lt;p&gt;KSY MediaPlayer iOS SDK可运行于 iPhone/iPod Touch/iPad，支持 iOS 7.0 及以上版本; 支持 armv7/arm64以及虚拟机运行。&lt;/p&gt;
&lt;h3 id=&quot;推流工具-SDK-IOS&quot;&gt;&lt;a href=&quot;#推流工具-SDK-IOS&quot; class=&quot;headerlink&quot; title=&quot;推流工具 SDK IOS&quot;&gt;&lt;/a&gt;推流工具 SDK IOS&lt;/h3&gt;&lt;h4 id=&quot;KSY-Live-iOS-SDK-概述&quot;&gt;&lt;a href=&quot;#KSY-Live-iOS-SDK-概述&quot; class=&quot;headerlink&quot; title=&quot;KSY Live iOS SDK 概述&quot;&gt;&lt;/a&gt;KSY Live iOS SDK 概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;KSY Live iOS SDK是金山云推出的 iOS 平台上使用的软件开发工具包(SDK), 其中Stremer负责采集和推流。MediaPlayer负责视频播放。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;主要功能点&quot;&gt;&lt;a href=&quot;#主要功能点&quot; class=&quot;headerlink&quot; title=&quot;主要功能点&quot;&gt;&lt;/a&gt;主要功能点&lt;/h4&gt;&lt;h5 id=&quot;Stremer推流特点&quot;&gt;&lt;a href=&quot;#Stremer推流特点&quot; class=&quot;headerlink&quot; title=&quot;Stremer推流特点&quot;&gt;&lt;/a&gt;Stremer推流特点&lt;/h5&gt;&lt;p&gt;音频编码：AAC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频编码：H.264 &lt;/li&gt;
&lt;li&gt;推流协议：RTMP&lt;/li&gt;
&lt;li&gt;视频分辨率：1280x720, 960x540,640x480,640x360,352x288&lt;/li&gt;
&lt;li&gt;屏幕朝向： 横屏, 竖屏&lt;/li&gt;
&lt;li&gt;iOS摄像头：前, 后置摄像头（可动态切换）&lt;/li&gt;
&lt;li&gt;音视频目标码率：可设&lt;/li&gt;
&lt;li&gt;根据网络带宽自适应调整视频的码率&lt;/li&gt;
&lt;li&gt;闪光灯：开/关&lt;/li&gt;
&lt;li&gt;Apple Doc 文档支持&lt;/li&gt;
&lt;li&gt;可使用系统原生接口对当前采集设备进行操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;MediaPlayer播放特点&quot;&gt;&lt;a href=&quot;#MediaPlayer播放特点&quot; class=&quot;headerlink&quot; title=&quot;MediaPlayer播放特点&quot;&gt;&lt;/a&gt;MediaPlayer播放特点&lt;/h5&gt;&lt;p&gt;与系统播放器MPMoviePlayerController接口一致，可以无缝快速切换至KSYMediaPlayer；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地全媒体格式支持, 并对主流的媒体格式(mp4, avi, wmv, flv, mkv, mov, rmvb 等 )进行优化；&lt;/li&gt;
&lt;li&gt;支持广泛的流式视频格式, HLS, RTMP, HTTP Rseudo-Streaming 等；&lt;/li&gt;
&lt;li&gt;低延时直播体验，配合金山云推流sdk，可以达到全程直播稳定的4秒内延时；&lt;/li&gt;
&lt;li&gt;实现快速满屏播放，为用户带来更快捷优质的播放体验；&lt;/li&gt;
&lt;li&gt;版本适配支持iOS 7.0以上版本；&lt;/li&gt;
&lt;li&gt;业内一流的H.265解码；&lt;/li&gt;
&lt;li&gt;小于2M大小的超轻量级直播sdk；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;合作案例-3&quot;&gt;&lt;a href=&quot;#合作案例-3&quot; class=&quot;headerlink&quot; title=&quot;合作案例&quot;&gt;&lt;/a&gt;合作案例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;今日头条 &lt;/li&gt;
&lt;li&gt;猎豹移动 &lt;/li&gt;
&lt;li&gt;小蚁 &lt;/li&gt;
&lt;li&gt;Nice好赞&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;直播云解决方案整理&quot;&gt;&lt;a href=&quot;#直播云解决方案整理&quot; class=&quot;headerlink&quot; title=&quot;直播云解决方案整理&quot;&gt;&lt;/a&gt;直播云解决方案整理&lt;/h1&gt;&lt;h2 id=&quot;TOC&quot;&gt;&lt;a href=&quot;#TOC&quot; class=&quot;headerlink
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS面试题（备份）</title>
    <link href="http://yoursite.com/2016/04/06/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%A4%87%E4%BB%BD%EF%BC%89/"/>
    <id>http://yoursite.com/2016/04/06/iOS面试题（备份）/</id>
    <published>2016-04-06T10:26:26.000Z</published>
    <updated>2016-04-06T10:29:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS面试题（备份）&quot;&gt;&lt;a href=&quot;#iOS面试题（备份）&quot; class=&quot;headerlink&quot; title=&quot;iOS面试题（备份）&quot;&gt;&lt;/a&gt;iOS面试题（备份）&lt;/h1&gt;&lt;p&gt;1.运行一下代码，控制台会输出什么？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation ViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self methodExchange];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self method1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self method2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)method1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;method1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)method2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      NSLog(@&amp;quot;method2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)methodExchange &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method method1 = class_getInstanceMethod([self class], @selector(method1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method method2 = class_getInstanceMethod([self class], @selector(method2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method_exchangeImplementations(method1, method2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.对methodExchange方法中的代码有没有改进意见？如果有，请说明原因。&lt;/p&gt;
&lt;p&gt;3.如何給NSArray添加一个属性（不能使用继承）。&lt;/p&gt;
&lt;p&gt;4.写出iOS9相对于iOS8增加了哪些新特性（5个以上）？&lt;/p&gt;
&lt;p&gt;5.以下这段代码的作用是？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_apply(5, globalQ, ^(size_t index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // dosometing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6.写出以下控件的高度（默认情况下）&lt;br&gt;Navigation Bar:&lt;br&gt;Status Bar:&lt;br&gt;Toolbar:&lt;br&gt;Keyboards:&lt;br&gt;Switch:&lt;/p&gt;
&lt;p&gt;7.&lt;br&gt;1、在一条街上，有5座房子，喷了5种颜色。&lt;br&gt;2、每个房里住着不同国籍的人&lt;br&gt;3、每个人喝不同的饮料，抽不同品牌的香烟，养不同的宠物&lt;/p&gt;
&lt;p&gt;问题是：谁养鱼？&lt;/p&gt;
&lt;p&gt;提示：&lt;br&gt;1、英国人住红色房子&lt;br&gt;2、瑞典人养狗&lt;br&gt;3、丹麦人喝茶&lt;br&gt;4、绿色房子在白色房子左面&lt;br&gt;5、绿色房子主人喝咖啡&lt;br&gt;6、抽Pall Mall 香烟的人养鸟&lt;br&gt;7、黄色房子主人抽Dunhill香烟&lt;br&gt;8、住在中间房子的人喝牛奶&lt;br&gt;9、 挪威人住第一间房&lt;br&gt;10、抽Blends香烟的人住在养猫的人隔壁&lt;br&gt;11、养马的人住抽Dunhill 香烟的人隔壁&lt;br&gt;12、抽Blue Master的人喝啤酒&lt;br&gt;13、德国人抽Prince香烟&lt;br&gt;14、挪威人住蓝色房子隔壁&lt;br&gt;15、抽Blends香烟的人有一个喝水的邻居&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS面试题（备份）&quot;&gt;&lt;a href=&quot;#iOS面试题（备份）&quot; class=&quot;headerlink&quot; title=&quot;iOS面试题（备份）&quot;&gt;&lt;/a&gt;iOS面试题（备份）&lt;/h1&gt;&lt;p&gt;1.运行一下代码，控制台会输出什么？&lt;/p&gt;
&lt;figure class=&quot;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>runtime之method_exchangeImplementations交换IMP指针</title>
    <link href="http://yoursite.com/2016/04/05/runtime%E4%B9%8Bmethod_exchangeImplementations%E4%BA%A4%E6%8D%A2IMP%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2016/04/05/runtime之method_exchangeImplementations交换IMP指针/</id>
    <published>2016-04-05T07:00:28.000Z</published>
    <updated>2016-04-05T07:08:12.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;runtime之method-exchangeImplementations交换IMP指针&quot;&gt;&lt;a href=&quot;#runtime之method-exchangeImplementations交换IMP指针&quot; class=&quot;headerlink&quot; title=&quot;runtime之method_exchangeImplementations交换IMP指针&quot;&gt;&lt;/a&gt;runtime之method_exchangeImplementations交换IMP指针&lt;/h1&gt;&lt;p&gt;method_exchangeImplementations作用：method_exchangeImplementations可以交换两个方法的具体实现，先举个例子，再解释。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation ViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self methodExchange];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self method1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self method2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)method1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;method1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)method2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      NSLog(@&amp;quot;method2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)methodExchange &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method method1 = class_getInstanceMethod([self class], @selector(method1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method method2 = class_getInstanceMethod([self class], @selector(method2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //交换method1和么thod的IMP指针，(IMP代表了方法的具体的实现）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method_exchangeImplementations(method1, method2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;[self method1]输出method2，[self method2]输出method1。&lt;/p&gt;
&lt;p&gt;原理如下：&lt;/p&gt;
&lt;p&gt;@selector(method1) ——-&amp;gt;IMP1(函数指针，具体实现输出么method1)&lt;/p&gt;
&lt;p&gt;@selector(method2) ——-&amp;gt;IMP1(函数指针，具体实现输出么method2)&lt;/p&gt;
&lt;p&gt;当执行method_exchangeImplementations(method1, method2)变成如下：&lt;/p&gt;
&lt;p&gt;@selector(method1) ——-&amp;gt;IMP2(函数指针，具体实现输出么method2)&lt;/p&gt;
&lt;p&gt;@selector(method2) ——-&amp;gt;IMP1(函数指针，具体实现输出么method1)&lt;/p&gt;
&lt;p&gt;所以，[self method1]输出method2，[self method2]输出method1。&lt;/p&gt;
&lt;p&gt;文／jiangamh（简书作者）&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://www.jianshu.com/p/99a4f5c6f59b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/99a4f5c6f59b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;runtime之method-exchangeImplementations交换IMP指针&quot;&gt;&lt;a href=&quot;#runtime之method-exchangeImplementations交换IMP指针&quot; class=&quot;headerlink&quot; title=&quot;ru
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="runtime" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/runtime/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS 9 Design Guidelines for iPhone and iPad</title>
    <link href="http://yoursite.com/2016/03/29/iOS%209%20Design%20Guidelines%20for%20iPhone%20and%20iPad/"/>
    <id>http://yoursite.com/2016/03/29/iOS 9 Design Guidelines for iPhone and iPad/</id>
    <published>2016-03-29T03:18:37.000Z</published>
    <updated>2016-03-29T05:59:39.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS has matured a lot over the years. In its 9th upgrade, Apple introduced a new system font called San Francisco, 3D Touch and multi-tasking on the iPad. In Xcode, you’ll find Stack Views, a fantastic tool for making your layouts more adaptive without the complexity of Auto Layout. More than ever, Apple encourages adaptive layouts so that your design works across multiple devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-StackViews.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Adaptive-Layout-and-Multitasking&quot;&gt;&lt;a href=&quot;#Adaptive-Layout-and-Multitasking&quot; class=&quot;headerlink&quot; title=&quot;Adaptive Layout and Multitasking&quot;&gt;&lt;/a&gt;Adaptive Layout and Multitasking&lt;/h2&gt;&lt;p&gt;With the increasing number of device resolutions to deal with, it is crucial to make your layout adaptive. Using tools like Sketch Constraints or Xcode, you have to design in a way that the screen size is flexible and can show extra menus if needed.&lt;br&gt;Here’s how the layout adapts from iPhone to iPad Pro. The user interface expands rather than scale up. For larger screens such as the iPad and the iPhone 6 Plus in landscape mode, a Left Navigation will appear instead of the Tab Bar. Download the Keynote file here.&lt;/p&gt;
&lt;iframe height=&quot;400&quot; width=&quot;640&quot; src=&quot;https://designcode.io/cloud/chapter1/Adaptive-Layout-iOS.mp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;How Fluid helps you adjust the design based on the Artboard size. Download the Sketch file.&lt;/p&gt;
&lt;iframe height=&quot;400&quot; width=&quot;640&quot; src=&quot;https://designcode.io/cloud/chapter1/Sketch-Constraints-Groups.mp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;San-Francisco-Font&quot;&gt;&lt;a href=&quot;#San-Francisco-Font&quot; class=&quot;headerlink&quot; title=&quot;San Francisco Font&quot;&gt;&lt;/a&gt;San Francisco Font&lt;/h2&gt;&lt;p&gt;With the release of iOS 9 and El Capitan, the default font is now the San Francisco font, which is made in-house by Apple. I encourage you to watch the video to understand how it affects the design for iOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Typography.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;SF-Font-Tracking&quot;&gt;&lt;a href=&quot;#SF-Font-Tracking&quot; class=&quot;headerlink&quot; title=&quot;SF Font Tracking&quot;&gt;&lt;/a&gt;SF Font Tracking&lt;/h2&gt;&lt;p&gt;iOS automatically adjusts the tracking value and Text/Display for San Francisco based on the font size. This ensures that the typeface is always easy to read. At 20 pt or more, SF UI Display should be used, otherwise use SF UI Text. These tracking values can only be applied in Photoshop, but here’s a formula for converting in Sketch.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/iOS-Tracking.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Use this Sketch plugin to quickly apply the correct character spacing values.&lt;/p&gt;
&lt;h2 id=&quot;3D-Touch&quot;&gt;&lt;a href=&quot;#3D-Touch&quot; class=&quot;headerlink&quot; title=&quot;3D Touch&quot;&gt;&lt;/a&gt;3D Touch&lt;/h2&gt;&lt;iframe height=&quot;400&quot; width=&quot;640&quot; src=&quot;https://designcode.io/cloud/chapter1/Design-3DTouch.mp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;A key new feature in iOS 9 is called 3D Touch, allowing people to quickly access options inside and outside of your app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Screen-3DTouch.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Users can now force-press your App Icon and find frequently used items. Inside an app, mails can be peeked and links can be previewed before entering full-screen.&lt;br&gt;Think of 3D Touch like the keyboard shortcuts on your Mac – they enable people to do repeated tasks quicker. You have to design shortcuts that make power users more productive. But just like Keyboard shortcuts, essential features shouldn’t be exclusive to 3D Touch. Your users must be able to operate your app normally without it.&lt;/p&gt;
&lt;h2 id=&quot;Points-and-Pixels&quot;&gt;&lt;a href=&quot;#Points-and-Pixels&quot; class=&quot;headerlink&quot; title=&quot;Points and Pixels&quot;&gt;&lt;/a&gt;Points and Pixels&lt;/h2&gt;&lt;p&gt;Developers work with point values, so it is important to understand the difference with pixels. When the iPhone was first introduced, the two units were the same: 1pt equals 1px. Then when retina screens came along, 1pt became 2px. So think of points as the values in the original iPhone, and pixels as the real values depending on the pixel density (iPhone 4,5,6 = @2x, iPhone 6 Plus = @3x).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Resolutions.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;For more info, check out this &lt;a href=&quot;http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;iPhone-Resolutions&quot;&gt;&lt;a href=&quot;#iPhone-Resolutions&quot; class=&quot;headerlink&quot; title=&quot;iPhone Resolutions&quot;&gt;&lt;/a&gt;iPhone Resolutions&lt;/h2&gt;&lt;p&gt;The iPhone has 4 main resolutions: 320 x 480 pt (iPhone 4), 320 x 568 pt (iPhone 5), 375 x 667 pt (iPhone 6) and 414 x 736 pt (iPhone 6 Plus). The layout doesn’t scale but expands based on the resolution. For example, the Navigation Bar only adjusts the width but keeps the same height. Elements inside it remain intact.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-iPhone.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The iPhone 6 Plus is the only iPhone that acts more like an iPad in Landscape mode. In other words, a Left Navigation will appear, replacing the need for the Tab Bar.&lt;/p&gt;
&lt;h2 id=&quot;iPad-Resolutions&quot;&gt;&lt;a href=&quot;#iPad-Resolutions&quot; class=&quot;headerlink&quot; title=&quot;iPad Resolutions&quot;&gt;&lt;/a&gt;iPad Resolutions&lt;/h2&gt;&lt;p&gt;The iPad has 2 main resolutions: 768 x 1024 pt (iPad), 1024 x 1366 pt (iPad Pro).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-iPad.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The iPad has 2 new features: Slide Over and Split View. Slide Over is an overlay that appears on the right of the screen without affecting the current app’s layout.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-SlideOver.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Split View allows users to multitask by running 2 apps simultaneously next to each other in Portrait mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-SplitView.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;App-Icon&quot;&gt;&lt;a href=&quot;#App-Icon&quot; class=&quot;headerlink&quot; title=&quot;App Icon&quot;&gt;&lt;/a&gt;App Icon&lt;/h2&gt;&lt;p&gt;The App Icon is used for the branding of your app. It’s the first thing that users see when they experience it. It appears prominently on the Home screen, the App Store, in Spotlight and Settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-AppIcon.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The App Icon template in the iOS 9 GUI.&lt;/p&gt;
&lt;p&gt;@1x assets are no longer supported for the iPhone, so you don’t need to generate them. App icons have 2 resolutions now: @2x and @3x. There are 3 types: App Icon, Spotlight and Settings. For the iPad, @1x and @2x are used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-AppIconsRes.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Super-Ellipse&quot;&gt;&lt;a href=&quot;#Super-Ellipse&quot; class=&quot;headerlink&quot; title=&quot;Super-Ellipse&quot;&gt;&lt;/a&gt;Super-Ellipse&lt;/h2&gt;&lt;p&gt;Since iOS 7, the rounded corners have shifted from plain rounded corners to a super-ellipse shape. It is important to keep note that you shouldn’t export the icons with the mask, or you’ll potentially find black artifacts. Instead, just export square assets to the App Store.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Rounded%20Corners.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Icon-Grid&quot;&gt;&lt;a href=&quot;#Icon-Grid&quot; class=&quot;headerlink&quot; title=&quot;Icon Grid&quot;&gt;&lt;/a&gt;Icon Grid&lt;/h2&gt;&lt;p&gt;Apple applied a golden ratio on some of their icons. This ensures that the icons are the heroes while keeping good proportions. While this is a good rule to follow, it’s not a strict rule. Even Apple omitted it on many of their icons.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Icon%20Grid.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Colors&quot;&gt;&lt;a href=&quot;#Colors&quot; class=&quot;headerlink&quot; title=&quot;Colors&quot;&gt;&lt;/a&gt;Colors&lt;/h2&gt;&lt;p&gt;iOS uses vibrant colors to bring out the buttons. These colors tend to work well against a white background as much as a black background. Keep in mind that colors should be used sparsely, for call-to-actions and minimal branding areas like the navigation bar. Roughly, only 10-20% of your design should have colors, or they will compete too much against the content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Colors.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;iOS often uses neutral colors to serve as the background and menu areas. A well-contrasted black text against a white background is used to make the text comfortable to read. Finally, the pastel blue is applied for making the buttons stand out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Screen-Colors.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Button-and-Font-Sizes&quot;&gt;&lt;a href=&quot;#Button-and-Font-Sizes&quot; class=&quot;headerlink&quot; title=&quot;Button and Font Sizes&quot;&gt;&lt;/a&gt;Button and Font Sizes&lt;/h2&gt;&lt;p&gt;The general rule is 44pt for buttons and 12pt for small text, 17pt for body text and 20pt+ for titles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Sizes.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Spacing-and-Alignment&quot;&gt;&lt;a href=&quot;#Spacing-and-Alignment&quot; class=&quot;headerlink&quot; title=&quot;Spacing and Alignment&quot;&gt;&lt;/a&gt;Spacing and Alignment&lt;/h2&gt;&lt;p&gt;A general rule is to have a minimum padding or margin of 8pt. This creates enough breathing room, which makes the layout easier to scan and the text more readable. Also, UI elements should be aligned and texts should have the same baseline position.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-SpacingAlign.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Status-Bar&quot;&gt;&lt;a href=&quot;#Status-Bar&quot; class=&quot;headerlink&quot; title=&quot;Status Bar&quot;&gt;&lt;/a&gt;Status Bar&lt;/h2&gt;&lt;p&gt;It is recommended to include the status bar in as many places as you can. Users rely on it for important information such as signal, time and battery. The text and icons can be white or black, but the background can be customized into any color and merge with the Navigation Bar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-StatusBar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Navigation-Bar&quot;&gt;&lt;a href=&quot;#Navigation-Bar&quot; class=&quot;headerlink&quot; title=&quot;Navigation Bar&quot;&gt;&lt;/a&gt;Navigation Bar&lt;/h2&gt;&lt;p&gt;The Navigation Bar is used for quick information about the screen. The left portion can be used for placing Back, Profile, Menu buttons whereas the right portion is generally used for action buttons like Add, Edit, Done. Note that if you use any of these system icons, you don’t need to create assets for them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-NavigationBar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Just like the Status Bar, the background can be customized to any color and typically has a subtle blur to ensure that the text is always readable. When the Status Bar is present, both backgrounds are merged.&lt;/p&gt;
&lt;h2 id=&quot;Search-Bar&quot;&gt;&lt;a href=&quot;#Search-Bar&quot; class=&quot;headerlink&quot; title=&quot;Search Bar&quot;&gt;&lt;/a&gt;Search Bar&lt;/h2&gt;&lt;p&gt;When you have a lot of content, it is always wise to make it searchable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Search.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Toolbar&quot;&gt;&lt;a href=&quot;#Toolbar&quot; class=&quot;headerlink&quot; title=&quot;Toolbar&quot;&gt;&lt;/a&gt;Toolbar&lt;/h2&gt;&lt;p&gt;When you need more real estate to place your action buttons and screen status, you’ll want to use the Toolbar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Toolbar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tab-Bar&quot;&gt;&lt;a href=&quot;#Tab-Bar&quot; class=&quot;headerlink&quot; title=&quot;Tab Bar&quot;&gt;&lt;/a&gt;Tab Bar&lt;/h2&gt;&lt;p&gt;The Tab Bar is the main navigation between multiple screens. Avoid the Hamburger menu if you have few items. Menus that are always visible will increase usage since obvious always win. Additionally, it is encouraged to add text next to your icons as most people won’t instantly recognize symbols, especially when they’re not universally known.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Tab%20Bar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When they’re not active, icons will generally have an outline instead of being filled. Like this, they attract less attention.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Tab%20Bar%20Sizes.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Table-View&quot;&gt;&lt;a href=&quot;#Table-View&quot; class=&quot;headerlink&quot; title=&quot;Table View&quot;&gt;&lt;/a&gt;Table View&lt;/h2&gt;&lt;p&gt;The Table View is a very common user interface for listing content. Most apps use a form of Table View. That’s because it can be very basic, or highly customizable down to the smallest elements.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-TableExamples.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;At the basic level, you can use a number of preset Styles and Accessories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-TableView.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cells can also be grouped, with a title above and description underneath.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-TableGrouped.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Collection-View&quot;&gt;&lt;a href=&quot;#Collection-View&quot; class=&quot;headerlink&quot; title=&quot;Collection View&quot;&gt;&lt;/a&gt;Collection View&lt;/h2&gt;&lt;p&gt;When you have both rows and columns in a grid style, you’ll need the Collection View. Although a little more advanced, it can pretty much create any layout you can dream of.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-CollectionExamples.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Collection View layouts may look like these, or a combination of them. The possibilities are endless.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-CollectionView.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Modals&quot;&gt;&lt;a href=&quot;#Modals&quot; class=&quot;headerlink&quot; title=&quot;Modals&quot;&gt;&lt;/a&gt;Modals&lt;/h2&gt;&lt;p&gt;The Alert dialog is used for conveying critical information and prompting quick actions. Alerts should be kept minimal and exiting must be obvious.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Alert.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Activity dialog allows you to share content (text, images, links) to iOS features like Airdrop, Favorites, Bookmarks and apps like Mail, Facebook, Twitter. While the look can’t be customized, the options are.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Share.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When the information presented isn’t short, you can design a modal that is full-sized, typically appearing from a slide, fade, flip or page animation. Like other modals, it must be easy to cancel and kept as short as possible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Modal.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Keyboards&quot;&gt;&lt;a href=&quot;#Keyboards&quot; class=&quot;headerlink&quot; title=&quot;Keyboards&quot;&gt;&lt;/a&gt;Keyboards&lt;/h2&gt;&lt;p&gt;The keyboard is used to input information in text fields such as search, chat or login. It’s highly customizable, for URL, Email, Phone numbers and even Emoji. You can choose between the Light and Dark themes, as well as how the action button is named (return being the default).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Keyboards.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;There’s a good Keyboard Kit for Sketch that you should download.&lt;/p&gt;
&lt;h2 id=&quot;Picker&quot;&gt;&lt;a href=&quot;#Picker&quot; class=&quot;headerlink&quot; title=&quot;Picker&quot;&gt;&lt;/a&gt;Picker&lt;/h2&gt;&lt;p&gt;When you have multiple options to choose from, you can use the Picker control. It’s particularly useful for dates, which controls 3 fields in one action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Picker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Segmented-Control&quot;&gt;&lt;a href=&quot;#Segmented-Control&quot; class=&quot;headerlink&quot; title=&quot;Segmented Control&quot;&gt;&lt;/a&gt;Segmented Control&lt;/h2&gt;&lt;p&gt;While the Tab Bar navigates to the main sections, the Segmented Control is used for sub-sections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-SementedControl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sliders&quot;&gt;&lt;a href=&quot;#Sliders&quot; class=&quot;headerlink&quot; title=&quot;Sliders&quot;&gt;&lt;/a&gt;Sliders&lt;/h2&gt;&lt;p&gt;Sliders are interactive controls that are less precise, but extremely useful for quick settings like Sound, Brightness and Video Progress.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Sliders.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Progress&quot;&gt;&lt;a href=&quot;#Progress&quot; class=&quot;headerlink&quot; title=&quot;Progress&quot;&gt;&lt;/a&gt;Progress&lt;/h2&gt;&lt;p&gt;The Progress bar is an indicator showing how far an activity has gone. For example, you can use this to show the loading progress of a Web View. Note that the height can be customized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Progress.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Switch&quot;&gt;&lt;a href=&quot;#Switch&quot; class=&quot;headerlink&quot; title=&quot;Switch&quot;&gt;&lt;/a&gt;Switch&lt;/h2&gt;&lt;p&gt;Use this to quickly toggle between on and off. Do not use this for anything else than on / off.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Switches.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Stepper&quot;&gt;&lt;a href=&quot;#Stepper&quot; class=&quot;headerlink&quot; title=&quot;Stepper&quot;&gt;&lt;/a&gt;Stepper&lt;/h2&gt;&lt;p&gt;Slower but more precise than the Slider, the Stepper allows the user to increase or decrease a value by an increment of one. The border and background are customizable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Stepper.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;iOS-Icons&quot;&gt;&lt;a href=&quot;#iOS-Icons&quot; class=&quot;headerlink&quot; title=&quot;iOS Icons&quot;&gt;&lt;/a&gt;iOS Icons&lt;/h2&gt;&lt;p&gt;These are the native icons that permeate iOS. Since they’re commonly used, they’re instantly recognized by users for their meaning. Using them for other purposes may confuse your users, so it’s important to be aware of how they’re used in iOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Design-Icons.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you design custom icons outside of these, it is important to use well-known symbols. Additionally, I strongly recommend to always accompany them with a small text of 10pt or more.&lt;/p&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;p&gt;These templates are not only useful for study but also to re-use and customize, so you don’t have to start from scratch and open the possibility for errors. As you get more comfortable with them, you’ll be able to get creative.&lt;/p&gt;
&lt;h2 id=&quot;iOS-9-GUI-for-iPhone&quot;&gt;&lt;a href=&quot;#iOS-9-GUI-for-iPhone&quot; class=&quot;headerlink&quot; title=&quot;iOS 9 GUI for iPhone&quot;&gt;&lt;/a&gt;iOS 9 GUI for iPhone&lt;/h2&gt;&lt;p&gt;If you’re designing for iOS, you’ll want to use pre-made elements such as the status, navigation and tab bars. Get comfortable with all the colors, sizes, fonts and components.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Mockup%2002.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;iOS-9-GUI-for-iPad&quot;&gt;&lt;a href=&quot;#iOS-9-GUI-for-iPad&quot; class=&quot;headerlink&quot; title=&quot;iOS 9 GUI for iPad&quot;&gt;&lt;/a&gt;iOS 9 GUI for iPad&lt;/h2&gt;&lt;p&gt;The new iPad UI Kit features the iPad Pro device and keyboards in both portrait and landscape modes. Everything is in vector.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Mockup-iPad800.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Apple-Watch-GUI&quot;&gt;&lt;a href=&quot;#Apple-Watch-GUI&quot; class=&quot;headerlink&quot; title=&quot;Apple Watch GUI&quot;&gt;&lt;/a&gt;Apple Watch GUI&lt;/h2&gt;&lt;p&gt;A very complete UI Kit for the Apple Watch with very element including the Apple Watch devices, icons and clocks in vector. You can resize and export them at any resolution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/Apple%20Watch%20GUI%20with%20SF%20Compact.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UI-Design-Dos-and-Don’ts&quot;&gt;&lt;a href=&quot;#UI-Design-Dos-and-Don’ts&quot; class=&quot;headerlink&quot; title=&quot;UI Design Dos and Don’ts&quot;&gt;&lt;/a&gt;UI Design Dos and Don’ts&lt;/h2&gt;&lt;p&gt;There are practices that you should avoid at all cost, especially if you’re new to iOS. Follow these simple examples put together by Apple.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/appledosanddonts.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;iOS-Human-Interface-Guidelines-by-Apple&quot;&gt;&lt;a href=&quot;#iOS-Human-Interface-Guidelines-by-Apple&quot; class=&quot;headerlink&quot; title=&quot;iOS Human Interface Guidelines by Apple&quot;&gt;&lt;/a&gt;iOS Human Interface Guidelines by Apple&lt;/h2&gt;&lt;p&gt;A high level and essential read by Apple, even if it’s just scanning the whole thing. iBooks format is also available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/iOS%20Human%20Interface%20Guidelines:%20Designing%20for%20iOS.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;iOS-Guidelines-by-Ivo-Mynttinen&quot;&gt;&lt;a href=&quot;#iOS-Guidelines-by-Ivo-Mynttinen&quot; class=&quot;headerlink&quot; title=&quot;iOS Guidelines by Ivo Mynttinen&quot;&gt;&lt;/a&gt;iOS Guidelines by Ivo Mynttinen&lt;/h2&gt;&lt;p&gt;If you’d like to read more about iOS from a different perspective, check out this excellent and comprehensive guide.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://designcode.io/cloud/chapter1/The%20iOS%20Design%20Guidelines%20-%20Ivo%20Mynttinen%20:%20User%20Interface%20Designer%202.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原文地址链接:&lt;a href=&quot;https://designcode.io/iosdesign-guidelines,使用VPN加载更优。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://designcode.io/iosdesign-guidelines,使用VPN加载更优。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS has matured a lot over the years. In its 9th upgrade, Apple introduced a new system font called San Francisco, 3D Touch and multi-tas
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="UI" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/UI/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/UI/iOS/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>runtime之通过objc_setAssociatedObject关联及传值</title>
    <link href="http://yoursite.com/2016/03/28/runtime%E4%B9%8B%E9%80%9A%E8%BF%87objc_setAssociatedObject%E5%85%B3%E8%81%94%E5%8F%8A%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2016/03/28/runtime之通过objc_setAssociatedObject关联及传值/</id>
    <published>2016-03-28T04:00:51.000Z</published>
    <updated>2016-03-28T04:04:41.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;runtime之通过objc-setAssociatedObject关联及传值&quot;&gt;&lt;a href=&quot;#runtime之通过objc-setAssociatedObject关联及传值&quot; class=&quot;headerlink&quot; title=&quot;runtime之通过objc_setAssociatedObject关联及传值&quot;&gt;&lt;/a&gt;runtime之通过objc_setAssociatedObject关联及传值&lt;/h1&gt;&lt;h2 id=&quot;关联&quot;&gt;&lt;a href=&quot;#关联&quot; class=&quot;headerlink&quot; title=&quot;关联&quot;&gt;&lt;/a&gt;关联&lt;/h2&gt;&lt;p&gt;关联是指把两个对象相互关联起来，使得其中的一个对象作为另外一个对象的一部分。&lt;br&gt;关联特性只有在Mac OS X V10.6以及以后的版本上才是可用的。&lt;/p&gt;
&lt;h2 id=&quot;在类的定义之外为类增加额外的存储空间&quot;&gt;&lt;a href=&quot;#在类的定义之外为类增加额外的存储空间&quot; class=&quot;headerlink&quot; title=&quot;在类的定义之外为类增加额外的存储空间&quot;&gt;&lt;/a&gt;在类的定义之外为类增加额外的存储空间&lt;/h2&gt;&lt;p&gt;使用关联，我们可以不用修改类的定义而为其对象增加存储空间。这在我们无法访问到类的源码的时候或者是考虑到二进制兼容性的时候是非常有用。&lt;br&gt;关联是基于关键字的，因此，我们可以为任何对象增加任意多的关联，每个都使用不同的关键字即可。关联是可以保证被关联的对象在关联对象的整个生命周期都是可用的（在垃圾自动回收环境下也不会导致资源不可回收）。&lt;/p&gt;
&lt;h2 id=&quot;创建关联&quot;&gt;&lt;a href=&quot;#创建关联&quot; class=&quot;headerlink&quot; title=&quot;创建关联&quot;&gt;&lt;/a&gt;创建关联&lt;/h2&gt;&lt;p&gt;创建关联要使用到Objective-C的运行时函数：objc_setAssociatedObject来把一个对象与另外一个对象进行关联。该函数需要四个参数：源对象，关键字，关联的对象和一个关联策略。当然，此处的关键字和关联策略是需要进一步讨论的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键字是一个void类型的指针。每一个关联的关键字必须是唯一的。通常都是会采用静态变量来作为关键字。&lt;/li&gt;
&lt;li&gt;关联策略表明了相关的对象是通过赋值，保留引用还是复制的方式进行关联的；还有这种关联是原子的还是非原子的。这里的关联策略和声明属性时的很类似。这种关联策略是通过使用预先定义好的常量来表示的。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;objc/runtime.h&amp;gt;头文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//唯一静态变量key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const char associatedkey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//objc_setAssociatedObject需要四个参数：源对象，关键字，关联的对象和一个关联策略。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//1 源对象alert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//2 关键字 唯一静态变量key associatedkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//3 关联的对象 @1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//4 关键策略  OBJC_ASSOCIATION_RETAIN_NONATOMIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;test&amp;quot; message:@&amp;quot;msg&amp;quot; delegate:self cancelButtonTitle:@&amp;quot;no&amp;quot; otherButtonTitles:@&amp;quot;yes&amp;quot;, nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(alertView,&amp;amp;associatedkey,@1,OBJC_ASSOCIATION_RETAIN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[alertView show];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;获取相关联的对象&quot;&gt;&lt;a href=&quot;#获取相关联的对象&quot; class=&quot;headerlink&quot; title=&quot;获取相关联的对象&quot;&gt;&lt;/a&gt;获取相关联的对象&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (buttonIndex == 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSNumber *number = (NSNumber *)objc_getAssociatedObject(alertView,&amp;amp;associatedkey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;number is %@&amp;quot;,number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;断开关联&quot;&gt;&lt;a href=&quot;#断开关联&quot; class=&quot;headerlink&quot; title=&quot;断开关联&quot;&gt;&lt;/a&gt;断开关联&lt;/h2&gt;&lt;p&gt;断开关联是使用objc_setAssociatedObject函数，传入nil值即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(alertView, &amp;amp;associatedkey, nil, OBJC_ASSOCIATION_ASSIGN);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，被关联的对象为nil，此时关联策略也就无关紧要了。&lt;br&gt;使用函数objc_removeAssociatedObjects可以断开所有关联。通常情况下不建议使用这个函数，因为他会断开所有关联。只有在需要把对象恢复到“原始状态”的时候才会使用这个函数。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;runtime之通过objc-setAssociatedObject关联及传值&quot;&gt;&lt;a href=&quot;#runtime之通过objc-setAssociatedObject关联及传值&quot; class=&quot;headerlink&quot; title=&quot;runtime之通过objc
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="runtime" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/runtime/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>提高iOS开发效率的工具</title>
    <link href="http://yoursite.com/2016/03/23/%E6%8F%90%E9%AB%98iOS%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/03/23/提高iOS开发效率的工具/</id>
    <published>2016-03-23T07:30:29.000Z</published>
    <updated>2016-03-28T03:10:31.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;提高iOS开发效率的工具&quot;&gt;&lt;a href=&quot;#提高iOS开发效率的工具&quot; class=&quot;headerlink&quot; title=&quot;提高iOS开发效率的工具&quot;&gt;&lt;/a&gt;提高iOS开发效率的工具&lt;/h1&gt;&lt;p&gt;iOS开发中又很多可以提高开发效率的工具，这篇文章整理我使用提高效率的工具，如果你也有一些好的工具，可以向我推荐一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源代码依赖管理工具CocoaPods&lt;/li&gt;
&lt;li&gt;Xcode 好用的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-源代码依赖管理工具CocoaPods&quot;&gt;&lt;a href=&quot;#1-源代码依赖管理工具CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;1:源代码依赖管理工具CocoaPods&quot;&gt;&lt;/a&gt;1:源代码依赖管理工具CocoaPods&lt;/h2&gt;&lt;p&gt;以来管理工具有很多，例如java的maven，android的gradle，js的bower，iOS中的CocoaPods。他们可以帮你下载第三方包 并管理这些包的依赖关系。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;更新ruby环境 $ gem update rails ＝＝＝＝＝＝＝＝＝ Mac OS X 10.5以上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更新gem环境 ： gem update –system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装cocoapods：sudo gem install cocoapods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod setup&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置项目依赖&quot;&gt;&lt;a href=&quot;#配置项目依赖&quot; class=&quot;headerlink&quot; title=&quot;配置项目依赖&quot;&gt;&lt;/a&gt;配置项目依赖&lt;/h3&gt;&lt;p&gt;1:创建Podfile文件 :touch Podfile&lt;br&gt;2:输入项目依赖 vim Podfile,例如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;platform :ios, &amp;quot;6.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;MBProgressHUD&amp;apos;, &amp;apos;~&amp;gt; 0.8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;MapBox&amp;apos;, &amp;apos;~&amp;gt; 1.1.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3:pod install 安装&lt;br&gt;4:后续打开项目文件&lt;/p&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查看某个库是否存在 －－$ pod search AFNetworking&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更新pod －－$ pod update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安装pod – $ pod install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用下面两条命令可以提高速度，原因是不检查spec仓库更新&quot;&gt;&lt;a href=&quot;#使用下面两条命令可以提高速度，原因是不检查spec仓库更新&quot; class=&quot;headerlink&quot; title=&quot;使用下面两条命令可以提高速度，原因是不检查spec仓库更新&quot;&gt;&lt;/a&gt;使用下面两条命令可以提高速度，原因是不检查spec仓库更新&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod install –verbose –no-repo-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod update –verbose –no-repo-update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-Xcode好用的插件&quot;&gt;&lt;a href=&quot;#2-Xcode好用的插件&quot; class=&quot;headerlink&quot; title=&quot;2:Xcode好用的插件&quot;&gt;&lt;/a&gt;2:Xcode好用的插件&lt;/h2&gt;&lt;p&gt;Xcode插件可以大大提高开发效率&lt;/p&gt;
&lt;h3 id=&quot;插件安装方式&quot;&gt;&lt;a href=&quot;#插件安装方式&quot; class=&quot;headerlink&quot; title=&quot;插件安装方式&quot;&gt;&lt;/a&gt;插件安装方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1：推荐！ 使用Alcatraz安装，commannd + shift + 9 调出图形界面，然后使用搜索插件安装&lt;/li&gt;
&lt;li&gt;2：手动安装：对应有些好的插件，Alcatraz找不到的话，可以手动下载插件包，然后安装。 安装方法：下载附件，解压后放在：你的用户/Library/Application Support/Developer/Shared/Xcode/Plug-ins目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Alcatraz安装&quot;&gt;&lt;a href=&quot;#Alcatraz安装&quot; class=&quot;headerlink&quot; title=&quot;Alcatraz安装&quot;&gt;&lt;/a&gt;Alcatraz安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;作用：管理Xcode插件&lt;/li&gt;
&lt;li&gt;安装：命令行执行：curl -f SSL &lt;a href=&quot;https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh&lt;/a&gt;    sh&lt;/li&gt;
&lt;li&gt;删除：rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin&lt;/li&gt;
&lt;li&gt;快捷键 command + shift + 9 github地址：&lt;a href=&quot;https://github.com/supermarin/Alcatraz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/supermarin/Alcatraz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;推荐插件&quot;&gt;&lt;a href=&quot;#推荐插件&quot; class=&quot;headerlink&quot; title=&quot;推荐插件&quot;&gt;&lt;/a&gt;推荐插件&lt;/h3&gt;&lt;h4 id=&quot;KSImageNamed&quot;&gt;&lt;a href=&quot;#KSImageNamed&quot; class=&quot;headerlink&quot; title=&quot;KSImageNamed&quot;&gt;&lt;/a&gt;KSImageNamed&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Xcode资源文件在代码中添加只能感应，例如： [UIImage imageNamed: 会出现项目中的资源文件的智能感应&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;OMColorSense&quot;&gt;&lt;a href=&quot;#OMColorSense&quot; class=&quot;headerlink&quot; title=&quot;OMColorSense&quot;&gt;&lt;/a&gt;OMColorSense&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Xcode 代码中可以通过选择颜色生成uicolor代码&lt;br&gt;使用:先随便写个颜色，然后点击颜色行，改行的右上角会出现色快，点击可以选择颜色。或点击Xcode导航中的Edit-》insert color&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;VVDocumenter-Xcode&quot;&gt;&lt;a href=&quot;#VVDocumenter-Xcode&quot; class=&quot;headerlink&quot; title=&quot;VVDocumenter-Xcode&quot;&gt;&lt;/a&gt;VVDocumenter-Xcode&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Xcode 按三次斜杠（///）后自动生成方法的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;fuzzyAutocomplete-，hou或是AutoresizeMask-for-Xcode&quot;&gt;&lt;a href=&quot;#fuzzyAutocomplete-，hou或是AutoresizeMask-for-Xcode&quot; class=&quot;headerlink&quot; title=&quot;fuzzyAutocomplete ，hou或是AutoresizeMask-for-Xcode&quot;&gt;&lt;/a&gt;fuzzyAutocomplete ，hou或是AutoresizeMask-for-Xcode&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;加强版只能感应，只是模糊匹配,必装！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;SCXcodeMiniMap&quot;&gt;&lt;a href=&quot;#SCXcodeMiniMap&quot; class=&quot;headerlink&quot; title=&quot;SCXcodeMiniMap&quot;&gt;&lt;/a&gt;SCXcodeMiniMap&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类似Sublime Text 右侧的迷你预览图&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;XToDo&quot;&gt;&lt;a href=&quot;#XToDo&quot; class=&quot;headerlink&quot; title=&quot;XToDo&quot;&gt;&lt;/a&gt;XToDo&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代办列表管理&lt;/li&gt;
&lt;li&gt;支持//TODO: //FIXME: //!!!: //???: 快捷键分别是 ： control + shift + T ,control + shift + X ,control + shift + ! ,control + shift + Q&lt;/li&gt;
&lt;li&gt;打开list 快捷键control + T&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;injectionforxcode&quot;&gt;&lt;a href=&quot;#injectionforxcode&quot; class=&quot;headerlink&quot; title=&quot;injectionforxcode&quot;&gt;&lt;/a&gt;injectionforxcode&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;说明：动态修改app中的样式而不需要重新编译&lt;/li&gt;
&lt;li&gt;教程：&lt;a href=&quot;http://nonomori.farbox.com/post/injection-plugin-for-Xcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nonomori.farbox.com/post/injection-plugin-for-Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;快捷键：control = ：更新代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;XAlign&quot;&gt;&lt;a href=&quot;#XAlign&quot; class=&quot;headerlink&quot; title=&quot;XAlign&quot;&gt;&lt;/a&gt;XAlign&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;说明：自动对齐代码&lt;/li&gt;
&lt;li&gt;快捷键：command+shift+X&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Code-Pilot&quot;&gt;&lt;a href=&quot;#Code-Pilot&quot; class=&quot;headerlink&quot; title=&quot;Code Pilot&quot;&gt;&lt;/a&gt;Code Pilot&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Xcode查找文件插件&lt;/li&gt;
&lt;li&gt;快捷键：command+shift+X,建议替换为control+X&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ESJsonFormat&quot;&gt;&lt;a href=&quot;#ESJsonFormat&quot; class=&quot;headerlink&quot; title=&quot;ESJsonFormat&quot;&gt;&lt;/a&gt;ESJsonFormat&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将JSON格式化输出为模型的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ZLGotoSandboxPlugin&quot;&gt;&lt;a href=&quot;#ZLGotoSandboxPlugin&quot; class=&quot;headerlink&quot; title=&quot;ZLGotoSandboxPlugin&quot;&gt;&lt;/a&gt;ZLGotoSandboxPlugin&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以快速进入iPhone模拟器沙盒路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;CocoaPods&quot;&gt;&lt;a href=&quot;#CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods&quot;&gt;&lt;/a&gt;CocoaPods&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;cocoaPods插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Peckham&quot;&gt;&lt;a href=&quot;#Peckham&quot; class=&quot;headerlink&quot; title=&quot;Peckham&quot;&gt;&lt;/a&gt;Peckham&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;自动import头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Dash-for-Xcode&quot;&gt;&lt;a href=&quot;#Dash-for-Xcode&quot; class=&quot;headerlink&quot; title=&quot;Dash for Xcode&quot;&gt;&lt;/a&gt;Dash for Xcode&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Xcode文档插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Xcode更新之后插件失效的解决办法&quot;&gt;&lt;a href=&quot;#Xcode更新之后插件失效的解决办法&quot; class=&quot;headerlink&quot; title=&quot;Xcode更新之后插件失效的解决办法&quot;&gt;&lt;/a&gt;Xcode更新之后插件失效的解决办法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;打开终端，输入以下代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID\&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;获取到DVTPlugInCompatibilityUUID，然后&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I&amp;#123;&amp;#125; defaults write &amp;#123;&amp;#125; DVTPlugInCompatibilityUUIDs -array-add 9F75337B-21B4-4ADC-B558-F9CADF7073A7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;重启Xcode&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;提高iOS开发效率的工具&quot;&gt;&lt;a href=&quot;#提高iOS开发效率的工具&quot; class=&quot;headerlink&quot; title=&quot;提高iOS开发效率的工具&quot;&gt;&lt;/a&gt;提高iOS开发效率的工具&lt;/h1&gt;&lt;p&gt;iOS开发中又很多可以提高开发效率的工具，这篇文章整理我使用
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="工具" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>iOS多线程编程之NSThread的使用</title>
    <link href="http://yoursite.com/2016/03/21/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B9%8BNSThread%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/21/iOS多线程编程之NSThread的使用/</id>
    <published>2016-03-21T09:42:35.000Z</published>
    <updated>2016-03-21T10:06:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS多线程编程之NSThread的使用&quot;&gt;&lt;a href=&quot;#iOS多线程编程之NSThread的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程编程之NSThread的使用&quot;&gt;&lt;/a&gt;iOS多线程编程之NSThread的使用&lt;/h1&gt;&lt;h2 id=&quot;1、简介：&quot;&gt;&lt;a href=&quot;#1、简介：&quot; class=&quot;headerlink&quot; title=&quot;1、简介：&quot;&gt;&lt;/a&gt;1、简介：&lt;/h2&gt;&lt;h3 id=&quot;1-1-iOS有三种多线程编程的技术，分别是：&quot;&gt;&lt;a href=&quot;#1-1-iOS有三种多线程编程的技术，分别是：&quot; class=&quot;headerlink&quot; title=&quot;1.1 iOS有三种多线程编程的技术，分别是：&quot;&gt;&lt;/a&gt;1.1 iOS有三种多线程编程的技术，分别是：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.、NSThread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、Cocoa NSOperation （iOS多线程编程之NSOperation和NSOperationQueue的使用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、GCD  全称：Grand Central Dispatch（ iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三种编程方式从上到下，抽象度层次是从低到高的，抽象度越高的使用越简单，也是Apple最推荐使用的。&lt;br&gt;这篇我们主要介绍和使用NSThread，后面会继续2、3 的讲解和使用。&lt;/p&gt;
&lt;h3 id=&quot;1-2-三种方式的有缺点介绍：&quot;&gt;&lt;a href=&quot;#1-2-三种方式的有缺点介绍：&quot; class=&quot;headerlink&quot; title=&quot;1.2 三种方式的有缺点介绍：&quot;&gt;&lt;/a&gt;1.2 三种方式的有缺点介绍：&lt;/h3&gt;&lt;h4 id=&quot;NSThread&quot;&gt;&lt;a href=&quot;#NSThread&quot; class=&quot;headerlink&quot; title=&quot;NSThread:&quot;&gt;&lt;/a&gt;NSThread:&lt;/h4&gt;&lt;p&gt;优点：NSThread 比其他两个轻量级&lt;br&gt;缺点：需要自己管理线程的生命周期，线程同步。线程同步对数据的加锁会有一定的系统开销&lt;/p&gt;
&lt;p&gt;NSThread实现的技术有下面三种：&lt;/p&gt;
&lt;h5 id=&quot;Cocoa-threads&quot;&gt;&lt;a href=&quot;#Cocoa-threads&quot; class=&quot;headerlink&quot; title=&quot;Cocoa threads&quot;&gt;&lt;/a&gt;Cocoa threads&lt;/h5&gt;&lt;p&gt;Cocoa implements threads using the NSThread class. Cocoa also provides methods on NSObject for spawning new threads and executing code on already-running threads. For more information, see “Using NSThread” and “Using NSObject to Spawn a Thread.”&lt;/p&gt;
&lt;h5 id=&quot;POSIX-threads&quot;&gt;&lt;a href=&quot;#POSIX-threads&quot; class=&quot;headerlink&quot; title=&quot;POSIX threads&quot;&gt;&lt;/a&gt;POSIX threads&lt;/h5&gt;&lt;p&gt;POSIX threads provide a C-based interface for creating threads. If you are not writing a Cocoa application, this is the best choice for creating threads. The POSIX interface is relatively simple to use and offers ample flexibility for configuring your threads. For more information, see “Using POSIX Threads”&lt;/p&gt;
&lt;h5 id=&quot;Multiprocessing-Services&quot;&gt;&lt;a href=&quot;#Multiprocessing-Services&quot; class=&quot;headerlink&quot; title=&quot;Multiprocessing Services&quot;&gt;&lt;/a&gt;Multiprocessing Services&lt;/h5&gt;&lt;p&gt;Multiprocessing Services is a legacy C-based interface used by applications transitioning from older versions of Mac OS. This technology is available in OS X only and should be avoided for any new development. Instead, you should use the NSThread class or POSIX threads. If you need more information on this technology, see Multiprocessing Services Programming Guide.&lt;/p&gt;
&lt;p&gt;一般使用cocoa thread 技术。&lt;/p&gt;
&lt;h4 id=&quot;Cocoa-operation&quot;&gt;&lt;a href=&quot;#Cocoa-operation&quot; class=&quot;headerlink&quot; title=&quot;Cocoa operation&quot;&gt;&lt;/a&gt;Cocoa operation&lt;/h4&gt;&lt;p&gt;优点：不需要关心线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上。&lt;br&gt;Cocoa operation 相关的类是 NSOperation ，NSOperationQueue。NSOperation是个抽象类，使用它必须用它的子类，可以实现它或者使用它定义好的两个子类：NSInvocationOperation 和 NSBlockOperation。创建NSOperation子类的对象，把对象添加到NSOperationQueue队列里执行。&lt;/p&gt;
&lt;h4 id=&quot;GCD&quot;&gt;&lt;a href=&quot;#GCD&quot; class=&quot;headerlink&quot; title=&quot;GCD&quot;&gt;&lt;/a&gt;GCD&lt;/h4&gt;&lt;p&gt;Grand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。在iOS4.0开始之后才能使用。GCD是一个替代诸如NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术。现在的iOS系统都升级到6了，所以不用担心该技术不能使用。&lt;br&gt;介绍完这三种多线程编程方式，我们这篇先介绍NSThread的使用。&lt;/p&gt;
&lt;h2 id=&quot;2、NSThread的使用&quot;&gt;&lt;a href=&quot;#2、NSThread的使用&quot; class=&quot;headerlink&quot; title=&quot;2、NSThread的使用&quot;&gt;&lt;/a&gt;2、NSThread的使用&lt;/h2&gt;&lt;h3 id=&quot;2-1-NSThread-有两种直接创建方式：&quot;&gt;&lt;a href=&quot;#2-1-NSThread-有两种直接创建方式：&quot; class=&quot;headerlink&quot; title=&quot;2.1 NSThread 有两种直接创建方式：&quot;&gt;&lt;/a&gt;2.1 NSThread 有两种直接创建方式：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithTarget:(id)target selector:(SEL)selector object:(id)argument&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (void)detachNewThreadSelector:(SEL)aSelector toTarget:(id)aTarget withObject:(id)anArgument&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个是实例方法，第二个是类方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[NSThread detachNewThreadSelector:@selector(doSomething:) toTarget:self withObject:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSThread* myThread = [[NSThread alloc] initWithTarget:self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        selector:@selector(doSomething:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        object:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myThread start];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-2-参数的意义：&quot;&gt;&lt;a href=&quot;#2-2-参数的意义：&quot; class=&quot;headerlink&quot; title=&quot;2.2 参数的意义：&quot;&gt;&lt;/a&gt;2.2 参数的意义：&lt;/h3&gt;&lt;p&gt;selector ：线程执行的方法，这个selector只能有一个参数，而且不能有返回值。&lt;br&gt;target  ：selector消息发送的对象&lt;br&gt;argument:传输给target的唯一参数，也可以是nil&lt;br&gt;第一种方式会直接创建线程并且开始运行线程，第二种方式是先创建线程对象，然后再运行线程操作，在运行线程操作前可以设置线程的优先级等线程信息&lt;/p&gt;
&lt;h3 id=&quot;2-3-PS-不显式创建线程的方法：&quot;&gt;&lt;a href=&quot;#2-3-PS-不显式创建线程的方法：&quot; class=&quot;headerlink&quot; title=&quot;2.3 PS:不显式创建线程的方法：&quot;&gt;&lt;/a&gt;2.3 PS:不显式创建线程的方法：&lt;/h3&gt;&lt;p&gt;用NSObject的类方法  performSelectorInBackground:withObject: 创建一个线程：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Obj performSelectorInBackground:@selector(doSomething) withObject:nil];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-4-下载图片的例子：&quot;&gt;&lt;a href=&quot;#2-4-下载图片的例子：&quot; class=&quot;headerlink&quot; title=&quot;2.4 下载图片的例子：&quot;&gt;&lt;/a&gt;2.4 下载图片的例子：&lt;/h3&gt;&lt;h4 id=&quot;2-4-1-新建singeView-app&quot;&gt;&lt;a href=&quot;#2-4-1-新建singeView-app&quot; class=&quot;headerlink&quot; title=&quot;2.4.1  新建singeView app&quot;&gt;&lt;/a&gt;2.4.1  新建singeView app&lt;/h4&gt;&lt;p&gt;新建项目，并在xib文件上放置一个imageView控件。按住control键拖到viewController.h文件中创建imageView IBOutlet&lt;/p&gt;
&lt;p&gt;ViewController.m中实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  ViewController.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  NSThreadDemo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  Created by rongfzh on 12-9-23.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  Copyright (c) 2012年 rongfzh. All rights reserved.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define kURL @&amp;quot;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface ViewController ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation ViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)downloadImage:(NSString *) url&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData *data = [[NSData alloc] initWithContentsOfURL:[NSURL URLWithString:url]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImage *image = [[UIImage alloc]initWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(image == nil)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [self performSelectorOnMainThread:@selector(updateUI:) withObject:image waitUntilDone:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)updateUI:(UIImage*) image&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.imageView.image = image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    [NSThread detachNewThreadSelector:@selector(downloadImage:) toTarget:self withObject:kURL];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSThread *thread = [[NSThread alloc]initWithTarget:self selector:@selector(downloadImage:) object:kURL];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [thread start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)didReceiveMemoryWarning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super didReceiveMemoryWarning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Dispose of any resources that can be recreated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-4-2线程间通讯&quot;&gt;&lt;a href=&quot;#2-4-2线程间通讯&quot; class=&quot;headerlink&quot; title=&quot;2.4.2线程间通讯&quot;&gt;&lt;/a&gt;2.4.2线程间通讯&lt;/h4&gt;&lt;p&gt;线程下载完图片后怎么通知主线程更新界面呢？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self performSelectorOnMainThread:@selector(updateUI:) withObject:image waitUntilDone:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;performSelectorOnMainThread是NSObject的方法，除了可以更新主线程的数据外，还可以更新其他线程的比如：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用：performSelector:onThread:withObject:waitUntilDone:&lt;/p&gt;
&lt;p&gt;运行下载图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201209/23/1348412756_8445.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片下载下来了。&lt;/p&gt;
&lt;h3 id=&quot;2-5-线程同步&quot;&gt;&lt;a href=&quot;#2-5-线程同步&quot; class=&quot;headerlink&quot; title=&quot;2.5 线程同步&quot;&gt;&lt;/a&gt;2.5 线程同步&lt;/h3&gt;&lt;p&gt;我们演示一个经典的卖票的例子来讲NSThread的线程同步：&lt;br&gt;.h&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@class ViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int tickets;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSThread* ticketsThreadone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSThread* ticketsThreadtwo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSCondition* ticketsCondition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLock *theLock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (strong, nonatomic) UIWindow *window;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (strong, nonatomic) ViewController *viewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tickets = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theLock = [[NSLock alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 锁对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ticketsCondition = [[NSCondition alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ticketsThreadone = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadone setName:@&amp;quot;Thread-1&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadone start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ticketsThreadtwo = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadtwo setName:@&amp;quot;Thread-2&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadtwo start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Override point for customization after application launch.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.viewController = [[ViewController alloc] initWithNibName:@&amp;quot;ViewController&amp;quot; bundle:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window.rootViewController = self.viewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.window makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)run&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (TRUE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 上锁&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        [ticketsCondition lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theLock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(tickets &amp;gt;= 0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [NSThread sleepForTimeInterval:0.09];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            count = 100 tickets;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NSLog(@&amp;quot;当前票数是:%d,售出:%d,线程名:%@&amp;quot;,tickets,count,[[NSThread currentThread] name]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tickets--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        [ticketsCondition unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有线程同步的lock，卖票数可能是-1.加上lock之后线程同步保证了数据的正确性。&lt;br&gt;上面例子我使用了两种锁，一种NSCondition ，一种是：NSLock。 NSCondition我已经注释了。&lt;/p&gt;
&lt;h4 id=&quot;线程的顺序执行&quot;&gt;&lt;a href=&quot;#线程的顺序执行&quot; class=&quot;headerlink&quot; title=&quot;线程的顺序执行&quot;&gt;&lt;/a&gt;线程的顺序执行&lt;/h4&gt;&lt;p&gt;他们都可以通过&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ticketsCondition signal];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发送信号的方式，在一个线程唤醒另外一个线程的等待。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;AppDelegate.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation AppDelegate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tickets = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theLock = [[NSLock alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 锁对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ticketsCondition = [[NSCondition alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ticketsThreadone = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadone setName:@&amp;quot;Thread-1&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadone start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ticketsThreadtwo = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadtwo setName:@&amp;quot;Thread-2&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadtwo start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSThread *ticketsThreadthree = [[NSThread alloc] initWithTarget:self selector:@selector(run3) object:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadthree setName:@&amp;quot;Thread-3&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ticketsThreadthree start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Override point for customization after application launch.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.viewController = [[ViewController alloc] initWithNibName:@&amp;quot;ViewController&amp;quot; bundle:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window.rootViewController = self.viewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.window makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)run3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (YES) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ticketsCondition lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [NSThread sleepForTimeInterval:3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ticketsCondition signal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ticketsCondition unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)run&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (TRUE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 上锁&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ticketsCondition lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ticketsCondition wait];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theLock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(tickets &amp;gt;= 0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [NSThread sleepForTimeInterval:0.09];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            count = 100 tickets;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NSLog(@&amp;quot;当前票数是:%d,售出:%d,线程名:%@&amp;quot;,tickets,count,[[NSThread currentThread] name]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tickets--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ticketsCondition unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;wait是等待，我加了一个 线程3 去唤醒其他两个线程锁中的wait&lt;/p&gt;
&lt;h5 id=&quot;其他同步&quot;&gt;&lt;a href=&quot;#其他同步&quot; class=&quot;headerlink&quot; title=&quot;其他同步&quot;&gt;&lt;/a&gt;其他同步&lt;/h5&gt;&lt;p&gt;我们可以使用指令 @synchronized 来简化 NSLock的使用，这样我们就不必显示编写创建NSLock,加锁并解锁相关代码。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)doSomeThing:(id)anObj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @synchronized(anObj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Everything between the braces is protected by the @synchronized directive.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有其他的一些锁对象，比如：循环锁NSRecursiveLock，条件锁NSConditionLock，分布式锁NSDistributedLock等等,可以自己看官方文档学习&lt;br&gt;NSThread下载图片的例子代码：&lt;a href=&quot;http://download.csdn.net/detail/totogo2010/4591149&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://download.csdn.net/detail/totogo2010/4591149&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;著作权声明：本文由&lt;a href=&quot;http://blog.csdn.net/totogo2010/原创，欢迎转载分享。请尊重作者劳动，转载时保留该声明和作者博客链接，谢谢!&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/totogo2010/原创，欢迎转载分享。请尊重作者劳动，转载时保留该声明和作者博客链接，谢谢!&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS多线程编程之NSThread的使用&quot;&gt;&lt;a href=&quot;#iOS多线程编程之NSThread的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程编程之NSThread的使用&quot;&gt;&lt;/a&gt;iOS多线程编程之NSThread的使用&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开始使用React Native</title>
    <link href="http://yoursite.com/2016/03/18/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8React%20Native/"/>
    <id>http://yoursite.com/2016/03/18/开始使用React Native/</id>
    <published>2016-03-18T02:41:40.000Z</published>
    <updated>2016-03-18T03:22:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;开始使用React-Native&quot;&gt;&lt;a href=&quot;#开始使用React-Native&quot; class=&quot;headerlink&quot; title=&quot;开始使用React Native&quot;&gt;&lt;/a&gt;开始使用React Native&lt;/h1&gt;&lt;h2 id=&quot;环境需求&quot;&gt;&lt;a href=&quot;#环境需求&quot; class=&quot;headerlink&quot; title=&quot;环境需求&quot;&gt;&lt;/a&gt;环境需求&lt;/h2&gt;&lt;p&gt;1.OS X - 本向导假设您的操作系统是OS X，因为这是开发iOS应用所必须的。&lt;/p&gt;
&lt;p&gt;2.推荐使用&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt; 来安装Watchman和Flow&lt;/p&gt;
&lt;p&gt;3.安装&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt; 4.0或更高版本(译注：如果你并不使用Node.js开发网站，只是用于React Native的开发，那么请先安装homebrew，然后直接使用brew install node安装即可，不必按照下面的nvm的安装步骤)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 nvm（安装向导在&lt;a href=&quot;https://github.com/creationix/nvm#installation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;）。然后运行nvm install node &amp;amp;&amp;amp; nvm alias default node，这将会默认安装最新版本的Node.js并且设置好命令行的环境变量，这样你可以输入node命令来启动Node.js环境。nvm使你可以同时安装多个版本的Node.js，并且在这些版本之间轻松切换。&lt;/li&gt;
&lt;li&gt;如果你从未接触过npm，推荐阅读&lt;a href=&quot;https://docs.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm的文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.在命令行中输入brew install watchman，我们推荐安装&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;watchman&lt;/a&gt;，否则你可能会遇到一个Node.js监视文件系统的BUG。&lt;/p&gt;
&lt;p&gt;5.如果你希望使用flow来为js代码加上类型检查，那么在命令行中输入brew install flow来安装flow。（译注：新手可以跳过这一步）&lt;/p&gt;
&lt;p&gt;我们推荐您定期运行brew update &amp;amp;&amp;amp; brew upgrade来保持上述几个程序为最新版本。&lt;/p&gt;
&lt;h2 id=&quot;iOS开发环境准备&quot;&gt;&lt;a href=&quot;#iOS开发环境准备&quot; class=&quot;headerlink&quot; title=&quot;iOS开发环境准备&quot;&gt;&lt;/a&gt;iOS开发环境准备&lt;/h2&gt;&lt;p&gt;你需要安装&lt;a href=&quot;https://developer.apple.com/xcode/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode&lt;/a&gt; 7.0或者更高版本。你可以在App Store中找到并安装Xcode。&lt;/p&gt;
&lt;p&gt;译注：如果您选择从第三方网站/镜像下载Xcode，请务必从正规镜像网站下载验证文件Hash以防止类似XcodeGhost的安全风险发生，不要信任论坛、百度空间等分享渠道&lt;/p&gt;
&lt;h2 id=&quot;Android开发环境准备&quot;&gt;&lt;a href=&quot;#Android开发环境准备&quot; class=&quot;headerlink&quot; title=&quot;Android开发环境准备&quot;&gt;&lt;/a&gt;Android开发环境准备&lt;/h2&gt;&lt;p&gt;要使React Native应用支持Android，首先需要安装Android SDK (如果你不想连接安卓设备，那么还需要一个安卓模拟器)。参见 &lt;a href=&quot;http://reactnative.cn/docs/android-setup.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android开发指南&lt;/a&gt; 了解如何搭建安卓开发环境。&lt;/p&gt;
&lt;p&gt;注： 现在&lt;a href=&quot;http://reactnative.cn/docs/linux-windows-support.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows和Linux也在实验性的支持&lt;/a&gt;Android开发。&lt;/p&gt;
&lt;p&gt;译注： Windows用户可以参考&lt;a href=&quot;http://bbs.reactnative.cn/topic/10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个帖子&lt;/a&gt;来搭建环境。&lt;/p&gt;
&lt;p&gt;快速开始&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g react-native-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ react-native init AwesomeProject&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;译注：由于众所周知的网络原因，react-native命令行从npm官方源拖代码时会遇上麻烦。请将npm仓库源替换为国内镜像：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm config set registry https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config set disturl https://npm.taobao.org/dist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另，执行init时切记不要在前面加上sudo（否则新项目的目录所有者会变为root而不是当前用户，导致一系列权限问题，请使用chown修复）。&lt;br&gt;本站论坛区提供了完整的&lt;a href=&quot;http://bbs.reactnative.cn/topic/11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;绿色纯净新项目包&lt;/a&gt;。完整打包全部iOS和Android的第三方依赖，只要环境配置正确，无需科学上网漫长等待，解压即可直接运行。&lt;/p&gt;
&lt;h3 id=&quot;运行iOS应用&quot;&gt;&lt;a href=&quot;#运行iOS应用&quot; class=&quot;headerlink&quot; title=&quot;运行iOS应用&quot;&gt;&lt;/a&gt;运行iOS应用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;$ cd AwesomeProject&lt;/li&gt;
&lt;li&gt;用XCode打开ios/AwesomeProject.xcodeproj并点击Run按钮。&lt;/li&gt;
&lt;li&gt;使用你喜欢的文本编辑器打开index.ios.js并随便改上几行。&lt;/li&gt;
&lt;li&gt;在iOS Emulator中按下⌘-R就可以刷新APP并看到你的最新修改！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;运行Android应用&quot;&gt;&lt;a href=&quot;#运行Android应用&quot; class=&quot;headerlink&quot; title=&quot;运行Android应用&quot;&gt;&lt;/a&gt;运行Android应用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;$ cd AwesomeProject&lt;/li&gt;
&lt;li&gt;$ react-native run-android&lt;/li&gt;
&lt;li&gt;使用你喜欢的文本编辑器打开index.android.js并随便改上几行&lt;/li&gt;
&lt;li&gt;按Menu键（通常是F2，在Genymotion模拟器中是⌘+M）然后选择 Reload JS 就可以看到你的最新修改。&lt;/li&gt;
&lt;li&gt;在终端下运行adb logcat *:S ReactNative:V ReactNativeJS:V可以看到你的应用的日志。&lt;br&gt;注：: 如果你打算在真实设备而非模拟器上运行，参见&lt;a href=&quot;http://reactnative.cn/docs/running-on-device-android.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在设备上运行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恭喜！现在你已经成功运行并修改了你的第一个React Native应用！&lt;/p&gt;
&lt;p&gt;如果你在以上过程中遇到了任何问题，可以看看论坛里总结的&lt;a href=&quot;http://bbs.reactnative.cn/topic/130&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常见问题&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;为已有的React-Native工程添加Android支持&quot;&gt;&lt;a href=&quot;#为已有的React-Native工程添加Android支持&quot; class=&quot;headerlink&quot; title=&quot;为已有的React Native工程添加Android支持&quot;&gt;&lt;/a&gt;为已有的React Native工程添加Android支持&lt;/h2&gt;&lt;p&gt;如果你已经有了一个只有iOS版本的React Native工程，并且希望添加Android支持，你需要在你的工程目录下运行以下命令：&lt;/p&gt;
&lt;p&gt;1.打开package.json文件，在dependencies项中找到react-native，并将其后的版本号修改为&lt;a href=&quot;https://www.npmjs.com/package/react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最新版本&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2.$ npm install&lt;/p&gt;
&lt;p&gt;3.$ react-native android&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开始使用React-Native&quot;&gt;&lt;a href=&quot;#开始使用React-Native&quot; class=&quot;headerlink&quot; title=&quot;开始使用React Native&quot;&gt;&lt;/a&gt;开始使用React Native&lt;/h1&gt;&lt;h2 id=&quot;环境需求&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="React Native" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/React-Native/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>iOS多线程编程之NSOperation和NSOperationQueue的使用</title>
    <link href="http://yoursite.com/2016/03/17/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B9%8BNSOperation%E5%92%8CNSOperationQueue%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/17/iOS多线程编程之NSOperation和NSOperationQueue的使用/</id>
    <published>2016-03-17T02:22:23.000Z</published>
    <updated>2016-03-17T06:11:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS多线程编程之NSOperation和NSOperationQueue的使用&quot;&gt;&lt;a href=&quot;#iOS多线程编程之NSOperation和NSOperationQueue的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程编程之NSOperation和NSOperationQueue的使用&quot;&gt;&lt;/a&gt;iOS多线程编程之NSOperation和NSOperationQueue的使用&lt;/h1&gt;&lt;h2 id=&quot;使用-NSOperation的方式有两种，&quot;&gt;&lt;a href=&quot;#使用-NSOperation的方式有两种，&quot; class=&quot;headerlink&quot; title=&quot;使用 NSOperation的方式有两种，&quot;&gt;&lt;/a&gt;使用 NSOperation的方式有两种，&lt;/h2&gt;&lt;h3 id=&quot;一种是用定义好的两个子类：&quot;&gt;&lt;a href=&quot;#一种是用定义好的两个子类：&quot; class=&quot;headerlink&quot; title=&quot;一种是用定义好的两个子类：&quot;&gt;&lt;/a&gt;一种是用定义好的两个子类：&lt;/h3&gt;&lt;p&gt;NSInvocationOperation 和 NSBlockOperation。&lt;/p&gt;
&lt;h3 id=&quot;另一种是继承NSOperation&quot;&gt;&lt;a href=&quot;#另一种是继承NSOperation&quot; class=&quot;headerlink&quot; title=&quot;另一种是继承NSOperation&quot;&gt;&lt;/a&gt;另一种是继承NSOperation&lt;/h3&gt;&lt;p&gt;如果你也熟悉Java，NSOperation就和java.lang.Runnable接口很相似。和Java的Runnable一样，NSOperation也是设计用来扩展的，只需继承重写NSOperation的一个方法main。相当与java 中Runnalbe的Run方法。然后把NSOperation子类的对象放入NSOperationQueue队列中，该队列就会启动并开始处理它。&lt;/p&gt;
&lt;h2 id=&quot;NSInvocationOperation例子：&quot;&gt;&lt;a href=&quot;#NSInvocationOperation例子：&quot; class=&quot;headerlink&quot; title=&quot;NSInvocationOperation例子：&quot;&gt;&lt;/a&gt;NSInvocationOperation例子：&lt;/h2&gt;&lt;p&gt;和前面一篇博文一样，我们实现一个下载图片的例子。新建一个Single View app，拖放一个ImageView控件到xib界面。&lt;/p&gt;
&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define kURL @&amp;quot;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface ViewController ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation ViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                           selector:@selector(downloadImage:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                             object:kURL];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSOperationQueue *queue = [[NSOperationQueue alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [queue addOperation:operation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)downloadImage:(NSString *)url&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;url:%@&amp;quot;, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSURL *nsUrl = [NSURL URLWithString:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData *data = [[NSData alloc]initWithContentsOfURL:nsUrl];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImage * image = [[UIImage alloc]initWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self performSelectorOnMainThread:@selector(updateUI:) withObject:image waitUntilDone:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)updateUI:(UIImage*) image&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.imageView.image = image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.viewDidLoad方法里可以看到我们用NSInvocationOperation建了一个后台线程，并且放到NSOperationQueue中。后台线程执行downloadImage方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.downloadImage 方法处理下载图片的逻辑。下载完成后用performSelectorOnMainThread执行主线程updateUI方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.updateUI 并把下载的图片显示到图片控件中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行可以看到下载图片显示在界面上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201209/24/1348475303_2749.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;第二种方式继承NSOperation&quot;&gt;&lt;a href=&quot;#第二种方式继承NSOperation&quot; class=&quot;headerlink&quot; title=&quot;第二种方式继承NSOperation&quot;&gt;&lt;/a&gt;第二种方式继承NSOperation&lt;/h2&gt;&lt;p&gt;在.m文件中实现main方法，main方法编写要执行的代码即可。&lt;/p&gt;
&lt;h3 id=&quot;如何控制线程池中的线程数？&quot;&gt;&lt;a href=&quot;#如何控制线程池中的线程数？&quot; class=&quot;headerlink&quot; title=&quot;如何控制线程池中的线程数？&quot;&gt;&lt;/a&gt;如何控制线程池中的线程数？&lt;/h3&gt;&lt;p&gt;队列里可以加入很多个NSOperation, 可以把NSOperationQueue看作一个线程池，可往线程池中添加操作（NSOperation）到队列中。线程池中的线程可看作消费者，从队列中取走操作，并执行它。&lt;/p&gt;
&lt;p&gt;通过下面的代码设置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[queue setMaxConcurrentOperationCount:5];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;线程池中的线程数，也就是并发操作数。默认情况下是-1，-1表示没有限制，这样会同时运行队列中的全部的操作。&lt;/p&gt;
&lt;p&gt;著作权声明：本文由&lt;a href=&quot;http://blog.csdn.net/totogo2010/article/details/8013316&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/totogo2010/article/details/8013316&lt;/a&gt;原创，欢迎转载分享。请尊重作者劳动，转载时保留该声明和作者博客链接，谢谢!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS多线程编程之NSOperation和NSOperationQueue的使用&quot;&gt;&lt;a href=&quot;#iOS多线程编程之NSOperation和NSOperationQueue的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程编程之NSO
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用</title>
    <link href="http://yoursite.com/2016/03/16/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B9%8BGrand%20Central%20Dispatch(GCD)%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/16/iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用/</id>
    <published>2016-03-16T09:47:52.000Z</published>
    <updated>2016-03-17T06:10:49.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS多线程编程之Grand-Central-Dispatch-GCD-介绍和使用&quot;&gt;&lt;a href=&quot;#iOS多线程编程之Grand-Central-Dispatch-GCD-介绍和使用&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用&quot;&gt;&lt;/a&gt;iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用&lt;/h1&gt;&lt;h2 id=&quot;介绍：&quot;&gt;&lt;a href=&quot;#介绍：&quot; class=&quot;headerlink&quot; title=&quot;介绍：&quot;&gt;&lt;/a&gt;介绍：&lt;/h2&gt;&lt;p&gt;Grand Central Dispatch 简称（GCD）是苹果公司开发的技术，以优化的应用程序支持多核心处理器和其他的对称多处理系统的系统。这建立在任务并行执行的线程池模式的基础上的。它首次发布在Mac OS X 10.6 ，iOS 4及以上也可用。&lt;/p&gt;
&lt;h2 id=&quot;设计：&quot;&gt;&lt;a href=&quot;#设计：&quot; class=&quot;headerlink&quot; title=&quot;设计：&quot;&gt;&lt;/a&gt;设计：&lt;/h2&gt;&lt;p&gt;GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。&lt;/p&gt;
&lt;p&gt;一个任务可以是一个函数(function)或者是一个block。 GCD的底层依然是用线程实现，不过这样可以让程序员不用关注实现的细节。&lt;/p&gt;
&lt;p&gt;GCD中的FIFO队列称为dispatch queue，它可以保证先进来的任务先得到执行&lt;br&gt;dispatch queue分为下面三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又称为private dispatch queues，同时只执行一个任务。Serial queue通常用于同步访问特定的资源或数据。当你创建多个Serial queue时，虽然它们各自是同步执行的，但Serial queue与Serial queue之间是并发执行的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又称为global dispatch queue，可以并发地执行多个任务，但是执行完成的顺序是随机的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main dispatch queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它是全局可用的serial queue，它是在应用程序主线程上执行任务的。&lt;/p&gt;
&lt;p&gt;我们看看dispatch queue如何使用&lt;/p&gt;
&lt;h2 id=&quot;1、常用的方法dispatch-async&quot;&gt;&lt;a href=&quot;#1、常用的方法dispatch-async&quot; class=&quot;headerlink&quot; title=&quot;1、常用的方法dispatch_async&quot;&gt;&lt;/a&gt;1、常用的方法dispatch_async&lt;/h2&gt;&lt;p&gt;为了避免界面在处理耗时的操作时卡死，比如读取网络数据，IO,数据库读写等，我们会在另外一个线程中处理这些操作，然后通知主线程更新界面。&lt;/p&gt;
&lt;p&gt;用GCD实现这个流程的操作比前面介绍的NSThread  NSOperation的方法都要简单。代码框架结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 耗时的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_async(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 更新界面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果这样还不清晰的话，那我们还是用上两篇博客中的下载图片为例子，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSURL * url = [NSURL URLWithString:@&amp;quot;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData * data = [[NSData alloc]initWithContentsOfURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImage *image = [[UIImage alloc]initWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (data != nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch_async(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.imageView.image = image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行显示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201209/23/1348412756_8445.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;是不是代码比NSThread  NSOperation简洁很多，而且GCD会自动根据任务在多核处理器上分配资源，优化程序。&lt;/p&gt;
&lt;p&gt;系统给每一个应用程序提供了三个concurrent dispatch queues。这三个并发调度队列是全局的，它们只有优先级的不同。因为是全局的，我们不需要去创建。我们只需要通过使用函数dispath_get_global_queue去得到队列，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t globalQ = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里也用到了系统默认就有一个串行队列main_queue&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t mainQ = dispatch_get_main_queue();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然dispatch queue是引用计数的对象，但是以上两个都是全局的队列，不用retain或release。&lt;/p&gt;
&lt;h2 id=&quot;2、dispatch-group-async的使用&quot;&gt;&lt;a href=&quot;#2、dispatch-group-async的使用&quot; class=&quot;headerlink&quot; title=&quot;2、dispatch_group_async的使用&quot;&gt;&lt;/a&gt;2、dispatch_group_async的使用&lt;/h2&gt;&lt;p&gt;dispatch_group_async可以实现监听一组任务是否完成，完成后得到通知执行其他的操作。这个方法很有用，比如你执行三个下载任务，当三个任务都下载完成后你才通知界面说完成的了。下面是一段例子代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_t group = dispatch_group_create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_async(group, queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;group1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_async(group, queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;group2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_async(group, queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;group3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_notify(group, dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;updateUi&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_release(group);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;dispatch_group_async是异步的方法，运行后可以看到打印结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:04:16.737 gcdTest[43328:11303] group1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:04:17.738 gcdTest[43328:12a1b] group2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:04:18.738 gcdTest[43328:13003] group3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:04:18.739 gcdTest[43328:f803] updateUi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个一秒打印一个，当第三个任务执行后，upadteUi被打印。&lt;/p&gt;
&lt;h2 id=&quot;3、dispatch-barrier-async的使用&quot;&gt;&lt;a href=&quot;#3、dispatch-barrier-async的使用&quot; class=&quot;headerlink&quot; title=&quot;3、dispatch_barrier_async的使用&quot;&gt;&lt;/a&gt;3、dispatch_barrier_async的使用&lt;/h2&gt;&lt;p&gt;dispatch_barrier_async是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行&lt;/p&gt;
&lt;p&gt;例子代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t queue = dispatch_queue_create(&amp;quot;gcdtest.rongfzh.yc&amp;quot;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;dispatch_async1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:4];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;dispatch_async2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_barrier_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;dispatch_barrier_async&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:4];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;dispatch_async3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:20:33.967 gcdTest[45547:11203] dispatch_async1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:20:35.967 gcdTest[45547:11303] dispatch_async2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:20:35.967 gcdTest[45547:11303] dispatch_barrier_async&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2012-09-25 16:20:40.970 gcdTest[45547:11303] dispatch_async3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意执行的时间，可以看到执行的顺序如上所述。&lt;/p&gt;
&lt;h2 id=&quot;4、dispatch-apply&quot;&gt;&lt;a href=&quot;#4、dispatch-apply&quot; class=&quot;headerlink&quot; title=&quot;4、dispatch_apply&quot;&gt;&lt;/a&gt;4、dispatch_apply&lt;/h2&gt;&lt;p&gt;执行某个代码片段N次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_apply(5, globalQ, ^(size_t index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 执行5次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;著作权声明：本文由&lt;a href=&quot;http://blog.csdn.net/totogo2010/article/details/8016129&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/totogo2010/article/details/8016129&lt;/a&gt;，欢迎转载分享。请尊重作者劳动，转载时保留该声明和作者博客链接，谢谢!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS多线程编程之Grand-Central-Dispatch-GCD-介绍和使用&quot;&gt;&lt;a href=&quot;#iOS多线程编程之Grand-Central-Dispatch-GCD-介绍和使用&quot; class=&quot;headerlink&quot; title=&quot;iOS多线程编程之G
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git操作指南</title>
    <link href="http://yoursite.com/2016/03/15/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/03/15/Git操作指南/</id>
    <published>2016-03-15T05:54:53.000Z</published>
    <updated>2016-03-16T09:41:56.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Git操作指南&quot;&gt;&lt;a href=&quot;#Git操作指南&quot; class=&quot;headerlink&quot; title=&quot;Git操作指南&quot;&gt;&lt;/a&gt;Git操作指南&lt;/h1&gt;&lt;h2 id=&quot;1-Git概念&quot;&gt;&lt;a href=&quot;#1-Git概念&quot; class=&quot;headerlink&quot; title=&quot;1. Git概念&quot;&gt;&lt;/a&gt;1. Git概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-Git库中由三部分组成&quot;&gt;&lt;a href=&quot;#1-1-Git库中由三部分组成&quot; class=&quot;headerlink&quot; title=&quot;1.1. Git库中由三部分组成&quot;&gt;&lt;/a&gt;1.1. Git库中由三部分组成&lt;/h3&gt;&lt;p&gt;Git 仓库就是那个.git 目录，其中存放的是我们所提交的文档索引内容，Git 可基于文档索引内容对其所管理的文档进行内容追踪，从而实现文档的版本控制。.git目录位于工作目录内。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1） 工作目录：用户本地的目录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2） Index（索引）：将工作目录下所有文件（包含子目录）生成快照，存放到一个临时的存储区域，Git 称该区域为索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3） 仓库：将索引通过commit命令提交至仓库中，每一次提交都意味着版本在进行一次更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-使用Git时的初始化事项&quot;&gt;&lt;a href=&quot;#1-2-使用Git时的初始化事项&quot; class=&quot;headerlink&quot; title=&quot;1.2. 使用Git时的初始化事项&quot;&gt;&lt;/a&gt;1.2. 使用Git时的初始化事项&lt;/h3&gt;&lt;h4 id=&quot;1-2-1-Git初始化配置&quot;&gt;&lt;a href=&quot;#1-2-1-Git初始化配置&quot; class=&quot;headerlink&quot; title=&quot;1.2.1. Git初始化配置&quot;&gt;&lt;/a&gt;1.2.1. Git初始化配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1） 配置使用git仓库的人员姓名&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;Your Name Comes Here&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;2） 配置使用git仓库的人员email&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email you@yourdomain.example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-2-2-Git文档忽略机制&quot;&gt;&lt;a href=&quot;#1-2-2-Git文档忽略机制&quot; class=&quot;headerlink&quot; title=&quot;1.2.2. Git文档忽略机制&quot;&gt;&lt;/a&gt;1.2.2. Git文档忽略机制&lt;/h4&gt;&lt;p&gt;工作目录中有一些文件是不希望接受Git 管理的，譬如程序编译时生成的中间文件等等。Git 提供了文档忽略机制，可以将工作目录中不希望接受Git 管理的文档信息写到同一目录下的.gitignore 文件中。&lt;/p&gt;
&lt;p&gt;例如：工作目录下有个zh目录，如果不想把它加入到Git管理中，则执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo “zh” &amp;amp;gt; .gitignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关gitignore 文件的诸多细节知识可阅读其使用手册：man gitignore&lt;/p&gt;
&lt;h3 id=&quot;1-3-Git与Repo的比较&quot;&gt;&lt;a href=&quot;#1-3-Git与Repo的比较&quot; class=&quot;headerlink&quot; title=&quot;1.3. Git与Repo的比较&quot;&gt;&lt;/a&gt;1.3. Git与Repo的比较&lt;/h3&gt;&lt;p&gt;Git操作一般对应一个仓库，而Repo操作一般对应一个项目，即一个项目会由若干仓库组成。&lt;/p&gt;
&lt;p&gt;例如，在操作整个Recket项目时使用Repo，而操作其中的某个仓库时使用Git。在包含隐藏目录.git的目录下执行git操作。&lt;/p&gt;
&lt;h2 id=&quot;2-Git-help&quot;&gt;&lt;a href=&quot;#2-Git-help&quot; class=&quot;headerlink&quot; title=&quot;2. Git help&quot;&gt;&lt;/a&gt;2. Git help&lt;/h2&gt;&lt;p&gt;Git help 获取git基本命令&lt;/p&gt;
&lt;p&gt;（如果要知道某个特定命令的使用方法，例如：使用Git help clone，来获取git clone的使用方法）&lt;/p&gt;
&lt;h2 id=&quot;3-Git本地操作基本命令&quot;&gt;&lt;a href=&quot;#3-Git本地操作基本命令&quot; class=&quot;headerlink&quot; title=&quot;3. Git本地操作基本命令&quot;&gt;&lt;/a&gt;3. Git本地操作基本命令&lt;/h2&gt;&lt;h3 id=&quot;3-1-Git-init&quot;&gt;&lt;a href=&quot;#3-1-Git-init&quot; class=&quot;headerlink&quot; title=&quot;3.1. Git init&quot;&gt;&lt;/a&gt;3.1. Git init&lt;/h3&gt;&lt;p&gt;或者使用git init-db。&lt;/p&gt;
&lt;p&gt;创建一个空的Git库。在当前目录中产生一个.git 的子目录。以后，所有的文件变化信息都会保存到这个目录下，而不像CVS那样，会在每个目录和子目录下都创建一个CVS目录。&lt;/p&gt;
&lt;p&gt;在.git目录下有一个config文件，可以修改其中的配置信息。&lt;/p&gt;
&lt;h3 id=&quot;3-2-Git-add&quot;&gt;&lt;a href=&quot;#3-2-Git-add&quot; class=&quot;headerlink&quot; title=&quot;3.2. Git add&quot;&gt;&lt;/a&gt;3.2. Git add&lt;/h3&gt;&lt;p&gt;将当前工作目录中更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步。&lt;/p&gt;
&lt;p&gt;可以递归添加，即如果后面跟的是一个目录作为参数，则会递归添加整个目录中的所有子目录和文件。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add dir1 （ 添加dir1这个目录，目录下的所有文件都被加入 ）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Git add f1 f2 （ 添加f1，f2文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .      ( 添加当前目录下的所有文件和子目录 )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-3-Git-rm&quot;&gt;&lt;a href=&quot;#3-3-Git-rm&quot; class=&quot;headerlink&quot; title=&quot;3.3. Git rm&quot;&gt;&lt;/a&gt;3.3. Git rm&lt;/h3&gt;&lt;p&gt;从当前的工作目录中和索引中删除文件。&lt;/p&gt;
&lt;p&gt;可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm –r * （进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rm f1    (删除文件f1，包含本地目录和index中的此文件记录)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rm --ached f1 (删除文件f1，不会删除本地目录文件，只删除index中的文件记录；将已经git add的文件remove到cache中,这样commit的时候不会提交这个文件, 适用于一下子添加了很多文件, 却又想排除其中个别几个文件的情况.)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-4-Git-commit&quot;&gt;&lt;a href=&quot;#3-4-Git-commit&quot; class=&quot;headerlink&quot; title=&quot;3.4. Git commit&quot;&gt;&lt;/a&gt;3.4. Git commit&lt;/h3&gt;&lt;p&gt;提交当前工作目录的修改内容。&lt;/p&gt;
&lt;p&gt;直接调用git commit命令，会提示填写注释。通过如下方式在命令行就填写提交注释：git commit -m “Initial commit of gittutor reposistory”。 注意，和CVS不同，git的提交注释必须不能为空，否则就会提交失败。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit还有一个 -a的参数，可以将那些没有通过git add标识的变化一并强行提交，但是不建议使用这种方式。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每一次提交，git就会为全局代码建立一个唯一的commit标识代码，用户可以通过git reset命令恢复到任意一次提交时的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit –-amend –m “message” （在一个commit id上不断修改提交的内容）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-5-Git-status&quot;&gt;&lt;a href=&quot;#3-5-Git-status&quot; class=&quot;headerlink&quot; title=&quot;3.5. Git status&quot;&gt;&lt;/a&gt;3.5. Git status&lt;/h3&gt;&lt;p&gt;查看版本库的状态。可以得知哪些文件发生了变化，哪些文件还没有添加到git库中等等。 建议每次commit前都要通过该命令确认库状态。&lt;/p&gt;
&lt;p&gt;最常见的误操作是， 修改了一个文件， 没有调用git add通知git库该文件已经发生了变化就直接调用commit操作， 从而导致该文件并没有真正的提交。这时如果开发者以为已经提交了该文件，就继续修改甚至删除这个文件，那么修改的内容就没有通过版本管理起来。如果每次在 提交前，使用git status查看一下，就可以发现这种错误。因此，如果调用了git status命令，一定要格外注意那些提示为 “Changed but not updated:”的文件。 这些文件都是与上次commit相比发生了变化，但是却没有通过git add标识的文件。&lt;/p&gt;
&lt;h3 id=&quot;3-6-Git-log&quot;&gt;&lt;a href=&quot;#3-6-Git-log&quot; class=&quot;headerlink&quot; title=&quot;3.6. Git log&quot;&gt;&lt;/a&gt;3.6. Git log&lt;/h3&gt;&lt;p&gt;查看历史日志，包含每次的版本变化。每次版本变化对应一个commit id。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git log -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1的意思是只显示一个commit，如果想显示5个，就-5。不指定的话，git log会从该commit一直往后显示。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Git log --stat –summary （显示每次版本的详细变化）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在项目日志信息中，每条日志的首行（就是那一串字符）为版本更新提交所进行的命名，我们可以将该命名理解为项目版本号。项目版本号应该是唯一的，默认由 Git 自动生成，用以标示项目的某一次更新。如果我们将项目版本号用作git-show 命令的参数，即可查看该次项目版本的更新细节。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1) Git log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2）Git show&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，上述命令并非是真正的进行版本号自定义，只是制造了一个tag对象而已，这在进行项目版本对外发布时比较有用。&lt;/p&gt;
&lt;h3 id=&quot;3-7-Git-merge&quot;&gt;&lt;a href=&quot;#3-7-Git-merge&quot; class=&quot;headerlink&quot; title=&quot;3.7. Git merge&quot;&gt;&lt;/a&gt;3.7. Git merge&lt;/h3&gt;&lt;p&gt;把服务器上下载下来的代码和本地代码合并。或者进行分支合并。&lt;/p&gt;
&lt;p&gt;例如：当前在master分支上，若想将分支dev上的合并到master上，则git merge dev&lt;/p&gt;
&lt;p&gt;注意：git merge nov/eclair_eocket （是将服务器git库的eclair_eocket分支合并到本地分支上）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rebase nov/eclair_eocket （是将服务器git库的eclair_eocket分支映射到本地的一个临时分支上，然后将本地分支上的变化合并到这个临时分支，然后再用这个临时分支初始化本地分支）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-8-Git-diff&quot;&gt;&lt;a href=&quot;#3-8-Git-diff&quot; class=&quot;headerlink&quot; title=&quot;3.8. Git diff&quot;&gt;&lt;/a&gt;3.8. Git diff&lt;/h3&gt;&lt;p&gt;把本地的代码和index中的代码进行比较，或者是把index中的代码和本地仓库中的代码进行比较。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1） Git diff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较工作目录和Index中的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2） Git diff - - cached&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较index和本地仓库中的代码。&lt;/p&gt;
&lt;h3 id=&quot;3-9-Git-checkout&quot;&gt;&lt;a href=&quot;#3-9-Git-checkout&quot; class=&quot;headerlink&quot; title=&quot;3.9. Git checkout&quot;&gt;&lt;/a&gt;3.9. Git checkout&lt;/h3&gt;&lt;h4 id=&quot;3-9-1-切换到分支&quot;&gt;&lt;a href=&quot;#3-9-1-切换到分支&quot; class=&quot;headerlink&quot; title=&quot;3.9.1. 切换到分支&quot;&gt;&lt;/a&gt;3.9.1. 切换到分支&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1) 创建一个新分支，并切换到该分支上&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout –b 新分支名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;2）切换到某个已经建立的本地分支local_branch&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout local_branch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（使用cat .git/HEAD后，显示refs:refs/heads/ local_branch）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3) 切换到服务器上的某个分支remote_branch&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout remote_branch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（远程分支remote_branch可以通过 git branch –r 列出）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4) 切换到某个commit id&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout commit_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（使用cat .git/HEAD后，显示commit_id）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5) 切换到某个tag&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout tag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（使用cat .git/HEAD后，显示tag）&lt;/p&gt;
&lt;p&gt;注意： 除了1）和2）外，其余三种都只是切换到了一个临时的( no branch )状态 （this head is detached），这时用 git branch 可以看到处于（no branch）上， cat .git/HEAD 看到指向相应的commit id。 这个（no branch）只是临时存在的，并不是一个真正建立的branch。 如果此时执行2），则这个（no branch）就自动消失了；如果执行1）， 则创建新分支 new branch，并把这个(no branch)挂到这个新分支上，此时cat .git/refs/heads/new_branch 可以看到已经指向了刚才那个commit id。&lt;/p&gt;
&lt;h4 id=&quot;3-9-2-用已有分支初始化新分支&quot;&gt;&lt;a href=&quot;#3-9-2-用已有分支初始化新分支&quot; class=&quot;headerlink&quot; title=&quot;3.9.2. 用已有分支初始化新分支&quot;&gt;&lt;/a&gt;3.9.2. 用已有分支初始化新分支&lt;/h4&gt;&lt;p&gt;执行下面的命令，在切换到某个已经建立的local branch或者某个remote branch或者某个commit id 或者某个tag的同时，创建新分支new_branch，并且挂到这个新分支上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1） 切换到某个已经建立的本地分支local_branch，并且使用此分支初始化一个新分支new_branch。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout –b new_branch local_branch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;2) 切换到某个远程分支remote_branch，并且用此分支初始化一个新分支new_branch。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout –b new_branch remote_branch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;3) 切换到某个commit id，并建立新分支new_branch&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout –b new_branch commit_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;4) 切换到某个tag，并建立新分支new_branch&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git checkout –b new_branch tag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-9-3-还原代码&quot;&gt;&lt;a href=&quot;#3-9-3-还原代码&quot; class=&quot;headerlink&quot; title=&quot;3.9.3. 还原代码&quot;&gt;&lt;/a&gt;3.9.3. 还原代码&lt;/h4&gt;&lt;p&gt;例如 “git checkout app/model/user.rb” 就会将user.rb文件从上一个已提交的版本中更新回来，未提交的工作目录中的内容全部会被覆盖。&lt;/p&gt;
&lt;h3 id=&quot;3-10-Git-ls-files&quot;&gt;&lt;a href=&quot;#3-10-Git-ls-files&quot; class=&quot;headerlink&quot; title=&quot;3.10. Git-ls-files&quot;&gt;&lt;/a&gt;3.10. Git-ls-files&lt;/h3&gt;&lt;p&gt;查看当前的git库中有那些文件。&lt;/p&gt;
&lt;h3 id=&quot;3-11-Git-mv&quot;&gt;&lt;a href=&quot;#3-11-Git-mv&quot; class=&quot;headerlink&quot; title=&quot;3.11. Git mv&quot;&gt;&lt;/a&gt;3.11. Git mv&lt;/h3&gt;&lt;p&gt;重命名一个文件、目录或者链接。&lt;/p&gt;
&lt;p&gt;例如：Git mv helloworld.c helloworld1.c （把文件helloworld.c 重命名为 helloworld1.c）&lt;/p&gt;
&lt;h3 id=&quot;3-12-Git-branch&quot;&gt;&lt;a href=&quot;#3-12-Git-branch&quot; class=&quot;headerlink&quot; title=&quot;3.12. Git branch&quot;&gt;&lt;/a&gt;3.12. Git branch&lt;/h3&gt;&lt;h4 id=&quot;3-12-1-总述&quot;&gt;&lt;a href=&quot;#3-12-1-总述&quot; class=&quot;headerlink&quot; title=&quot;3.12.1. 总述&quot;&gt;&lt;/a&gt;3.12.1. 总述&lt;/h4&gt;&lt;p&gt;在 git 版本库中创建分支的成本几乎为零，所以，不必吝啬多创建几个分支。当第一次执行git init时，系统就会创建一个名为“master”的分支。 而其它分支则通过手工创建。&lt;/p&gt;
&lt;p&gt;下面列举一些常见的分支策略：&lt;/p&gt;
&lt;p&gt;创建一个属于自己的个人工作分支，以避免对主分支 master 造成太多的干扰，也方便与他人交流协作；&lt;/p&gt;
&lt;p&gt;当进行高风险的工作时，创建一个试验性的分支；&lt;/p&gt;
&lt;p&gt;合并别人的工作的时候，最好是创建一个临时的分支用来合并，合并完成后再“fetch”到自己的分支。&lt;/p&gt;
&lt;p&gt;对分支进行增、删、查等操作。&lt;/p&gt;
&lt;p&gt;注意：分支信息一般在.git/refs/目录下，其中heads目录下为本地分支，remotes为对应服务器上的分支，tags为标签。&lt;/p&gt;
&lt;h4 id=&quot;3-12-2-查看分支&quot;&gt;&lt;a href=&quot;#3-12-2-查看分支&quot; class=&quot;headerlink&quot; title=&quot;3.12.2. 查看分支&quot;&gt;&lt;/a&gt;3.12.2. 查看分支&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch 列出本地git库中的所有分支。在列出的分支中，若分支名前有*，则表示此分支为当前分支。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch –r 列出服务器git库的所有分支。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（可以继续使用命令 “ git checkout -b 本地分支名 服务器分支名”来获取服务器上某个分支的代码文件）。&lt;/p&gt;
&lt;h4 id=&quot;3-12-3-查看当前在哪个分支上&quot;&gt;&lt;a href=&quot;#3-12-3-查看当前在哪个分支上&quot; class=&quot;headerlink&quot; title=&quot;3.12.3. 查看当前在哪个分支上&quot;&gt;&lt;/a&gt;3.12.3. 查看当前在哪个分支上&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat .git/HEAD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-12-4-创建一个分支&quot;&gt;&lt;a href=&quot;#3-12-4-创建一个分支&quot; class=&quot;headerlink&quot; title=&quot;3.12.4. 创建一个分支&quot;&gt;&lt;/a&gt;3.12.4. 创建一个分支&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1） git branch 分支名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然创建了分支，但是不会将当前工作分支切换到新创建的分支上，因此，还需要命令“git checkout 分支名” 来切换，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2） git checout –b 分支名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不但创建了分支，还将当前工作分支切换到了该分支上。&lt;/p&gt;
&lt;h4 id=&quot;3-12-5-切换到某个分支：git-checkout-分支名&quot;&gt;&lt;a href=&quot;#3-12-5-切换到某个分支：git-checkout-分支名&quot; class=&quot;headerlink&quot; title=&quot;3.12.5. 切换到某个分支：git checkout 分支名&quot;&gt;&lt;/a&gt;3.12.5. 切换到某个分支：git checkout 分支名&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;切换到主分支：git checkout master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-12-6-删除分支&quot;&gt;&lt;a href=&quot;#3-12-6-删除分支&quot; class=&quot;headerlink&quot; title=&quot;3.12.6. 删除分支&quot;&gt;&lt;/a&gt;3.12.6. 删除分支&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch –D 分支名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意： 删除后，发生在该分支的所有变化都无法恢复。强制删除此分支。&lt;/p&gt;
&lt;h4 id=&quot;3-12-7-比较两个分支上的文件的区别&quot;&gt;&lt;a href=&quot;#3-12-7-比较两个分支上的文件的区别&quot; class=&quot;headerlink&quot; title=&quot;3.12.7. 比较两个分支上的文件的区别&quot;&gt;&lt;/a&gt;3.12.7. 比较两个分支上的文件的区别&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff master 分支名 （比较主分支和另一个分支的区别）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-12-8-查看分支历史&quot;&gt;&lt;a href=&quot;#3-12-8-查看分支历史&quot; class=&quot;headerlink&quot; title=&quot;3.12.8. 查看分支历史&quot;&gt;&lt;/a&gt;3.12.8. 查看分支历史&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git-show-branch （查看当前分支的提交注释及信息）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git-show-branch -all（查看所有分支的提交注释及信息）例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* [dev] d2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;! [master] m2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* [dev] d2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* [dev^] d1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* [dev~2] d0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*+ [master] m2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述例子中， “–”之上的两行表示有两个分支dev和master， 且dev分支上最后一次提交的日志是“d2”,master分支上最后一次提交的日志是 “m2”。 “–”之下的几行表示了分支演化的历史，其中 dev表示发生在dev分支上的最后一次提交，dev^表示发生在dev分支上的倒数第二次提交。dev~2表示发生在dev分支上的倒数第三次提交。&lt;/p&gt;
&lt;h4 id=&quot;3-12-9-查看当前分支的操作记录&quot;&gt;&lt;a href=&quot;#3-12-9-查看当前分支的操作记录&quot; class=&quot;headerlink&quot; title=&quot;3.12.9. 查看当前分支的操作记录&quot;&gt;&lt;/a&gt;3.12.9. 查看当前分支的操作记录&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git whatchanged&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-12-10-合并分支&quot;&gt;&lt;a href=&quot;#3-12-10-合并分支&quot; class=&quot;headerlink&quot; title=&quot;3.12.10. 合并分支&quot;&gt;&lt;/a&gt;3.12.10. 合并分支&lt;/h4&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git merge “注释” 合并的目标分支 合并的来源分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果合并有冲突，git会有提示。&lt;/p&gt;
&lt;p&gt;例如：git checkout master   （切换到master分支）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git merge HEAD dev~2 (合并master分支和dev~2分支)或者：git merge master dev~2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法二：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull 合并的目标分支 合并的来源分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如: git checkout master （切换到master分支）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull . dev~2（合并当前分支和dev~2分支）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-13-Git-rebase&quot;&gt;&lt;a href=&quot;#3-13-Git-rebase&quot; class=&quot;headerlink&quot; title=&quot;3.13. Git rebase&quot;&gt;&lt;/a&gt;3.13. Git rebase&lt;/h3&gt;&lt;p&gt;一般在将服务器最新内容合并到本地时使用，例如：在版本C时从服务器上获取内容到本地，修改了本地内容，此时想把本地修改的内容提交到服务器上；但发现服务器上的版本已经变为G了，此时就需要先执行Git rebase，将服务器上的最新版本合并到本地。例如：&lt;/p&gt;
&lt;p&gt;用下面两幅图解释会比较清楚一些，rebase命令执行后，实际上是将分支点从C移到了G，这样分支也就具有了从C到G的功能。&lt;/p&gt;
&lt;h3 id=&quot;3-14-Git-reset&quot;&gt;&lt;a href=&quot;#3-14-Git-reset&quot; class=&quot;headerlink&quot; title=&quot;3.14. Git reset&quot;&gt;&lt;/a&gt;3.14. Git reset&lt;/h3&gt;&lt;p&gt;库的逆转与恢复除了用来进行一些废弃的研发代码的重置外，还有一个重要的作用。比如我们从远程clone了一个代码库，在本地开发后，准备提交回远程。但是本地代码库在开发时，有功能性的commit，也有出于备份目的的commit等等。总之，commit的日志中有大量无用log，我们并不想把这些 log在提交回远程时也提交到库中。 因此，就要用到git reset。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset的概念比较复杂。它的命令形式：git reset [--mixed | --soft | --hard] [&amp;lt;commit-ish&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令的选项：&lt;/p&gt;
&lt;p&gt;–mixed 这个是默认的选项。如git reset [–mixed] dev^(dev^的定义可以参见2.6.5)。它的作用仅是重置分支状态到dev1^, 但是却不改变任何工作文件的内容。即，从dev1^到dev1的所有文件变化都保留了，但是dev1^到dev1之间的所有commit日志都被清除了， 而且，发生变化的文件内容也没有通过git add标识，如果您要重新commit，还需要对变化的文件做一次git add。 这样，commit后，就得到了一份非常干净的提交记录。 （回退了index和仓库中的内容）&lt;/p&gt;
&lt;p&gt;–soft相当于做了git reset –mixed，后，又对变化的文件做了git add。如果用了该选项， 就可以直接commit了。（回退了仓库中的内容）&lt;/p&gt;
&lt;p&gt;–hard这个命令就会导致所有信息的回退， 包括文件内容。 一般只有在重置废弃代码时，才用它。 执行后，文件内容也无法恢复回来了。（回退了工作目录、index和仓库中的内容）&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;切换到使用的分支上；&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset HEAD^ 回退第一个记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset HEAD~2 回退第二个记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想把工作目录下的文件也回退，则使用git reset - - hard HEAD^ 回退第一个记录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset - - hard HEAD~2 回退第二个记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还可以使用如下方法：&lt;/p&gt;
&lt;p&gt;将当前的工作目录完全回滚到指定的版本号，假设如下图，我们有A-G五次提交的版本，其中C的版本号是 bbaf6fb5060b4875b18ff9ff637ce118256d6f20，我们执行了’git reset bbaf6fb5060b4875b18ff9ff637ce118256d6f20’那么结果就只剩下了A-C三个提交的版本&lt;/p&gt;
&lt;h3 id=&quot;3-15-Git-revert&quot;&gt;&lt;a href=&quot;#3-15-Git-revert&quot; class=&quot;headerlink&quot; title=&quot;3.15. Git revert&quot;&gt;&lt;/a&gt;3.15. Git revert&lt;/h3&gt;&lt;p&gt;还原某次对版本的修改，例如：git revert commit_id （其中commit_id为commit代码时生成的一个唯一表示的字符串）&lt;/p&gt;
&lt;p&gt;例如：（3.6中）git revert dfb02e6e4f2f7b573337763e5c0013802e392818 （执行此操作，则还原上一次commit的操作）&lt;/p&gt;
&lt;h3 id=&quot;3-16-Git-config&quot;&gt;&lt;a href=&quot;#3-16-Git-config&quot; class=&quot;headerlink&quot; title=&quot;3.16. Git config&quot;&gt;&lt;/a&gt;3.16. Git config&lt;/h3&gt;&lt;p&gt;利用这个命令可以新增、更改Git的各种设置，例如 “git config branch.master.remote origin” 就将master的远程版本库设置为别名叫做origin版本库。&lt;/p&gt;
&lt;h3 id=&quot;3-17-Git-show&quot;&gt;&lt;a href=&quot;#3-17-Git-show&quot; class=&quot;headerlink&quot; title=&quot;3.17. Git show&quot;&gt;&lt;/a&gt;3.17. Git show&lt;/h3&gt;&lt;p&gt;显示对象的不同类型。&lt;/p&gt;
&lt;h3 id=&quot;3-18-Git-tag&quot;&gt;&lt;a href=&quot;#3-18-Git-tag&quot; class=&quot;headerlink&quot; title=&quot;3.18. Git tag&quot;&gt;&lt;/a&gt;3.18. Git tag&lt;/h3&gt;&lt;p&gt;创建、列出、删除或者验证一个标签对象（使用GPG签名的）。&lt;/p&gt;
&lt;p&gt;可以将某个具体的版本打上一个标签，这样就不需要记忆复杂的版本号哈希值字符串了，例如你可以使用 “git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20” 来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，而不是哈希值了。&lt;/p&gt;
&lt;h2 id=&quot;4-Git服务器操作命令（与服务器交互）&quot;&gt;&lt;a href=&quot;#4-Git服务器操作命令（与服务器交互）&quot; class=&quot;headerlink&quot; title=&quot;4. Git服务器操作命令（与服务器交互）&quot;&gt;&lt;/a&gt;4. Git服务器操作命令（与服务器交互）&lt;/h2&gt;&lt;h3 id=&quot;4-1-Git-clone&quot;&gt;&lt;a href=&quot;#4-1-Git-clone&quot; class=&quot;headerlink&quot; title=&quot;4.1. Git clone&quot;&gt;&lt;/a&gt;4.1. Git clone&lt;/h3&gt;&lt;p&gt;取出服务器的仓库的代码到本地建立的目录中（与服务器交互）&lt;/p&gt;
&lt;p&gt;通过git clone获取远端git库后，.git/config中的开发者信息不会被一起clone过来。仍然需要为本地库的.git/config文件添加开发者信息。此外，开发者还需要自己添加   . gitignore文件。&lt;/p&gt;
&lt;p&gt;通过git clone获取的远端git库，只包含了远端git库的当前工作分支。如果想获取其它分支信息，需要使用 “git branch –r” 来查看， 如果需要将远程的其它分支代码也获取过来，可以使用命令 “ git checkout -b 本地分支名 远程分支名”，其中，远程分支名为 “git branch –r” 所列出的分支名， 一般是诸如“origin/分支名”的样子。如果本地分支名已经存在， 则不需要“-b”参数。&lt;/p&gt;
&lt;h3 id=&quot;4-2-Git-pull&quot;&gt;&lt;a href=&quot;#4-2-Git-pull&quot; class=&quot;headerlink&quot; title=&quot;4.2. Git pull&quot;&gt;&lt;/a&gt;4.2. Git pull&lt;/h3&gt;&lt;p&gt;从服务器的仓库中获取代码，和本地代码合并。（与服务器交互，从服务器上下载最新代码，等同于： Git fetch + Git merge）&lt;/p&gt;
&lt;p&gt;从其它的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：“git pull origin master ”就是将origin这个版本库的代码更新到本地的master主分支。&lt;/p&gt;
&lt;p&gt;git pull可以从任意一个git库获取某个分支的内容。用法如下：&lt;/p&gt;
&lt;p&gt;git pull username@ipaddr:远端repository名远端分支名 本地分支名。这条命令将从远端git库的远端分支名获取到本地git库的一个本地分支中。其中，如果不写本地分支名，则默认pull到本地当前分支。&lt;/p&gt;
&lt;p&gt;需要注意的是，git pull也可以用来合并分支。 和git merge的作用相同。 因此，如果你的本地分支已经有内容，则git pull会合并这些文件，如果有冲突会报警。&lt;/p&gt;
&lt;h3 id=&quot;4-3-Git-push&quot;&gt;&lt;a href=&quot;#4-3-Git-push&quot; class=&quot;headerlink&quot; title=&quot;4.3. Git push&quot;&gt;&lt;/a&gt;4.3. Git push&lt;/h3&gt;&lt;p&gt;将本地commit的代码更新到远程版本库中，例如 “git push origin”就会将本地的代码更新到名为orgin的远程版本库中。&lt;/p&gt;
&lt;p&gt;git push和git pull正好想反，是将本地某个分支的内容提交到远端某个分支上。用法： git pushusername@ipaddr:远端repository名本地分支名 远端分支名。这条命令将本地git库的一个本地分支push到远端git库的远端分支名中。&lt;/p&gt;
&lt;p&gt;需要格外注意的是，git push好像不会自动合并文件。因此，如果git push时，发生了冲突，就会被后push的文件内容强行覆盖，而且没有什么提示。 这在合作开发时是很危险的事情。&lt;/p&gt;
&lt;h3 id=&quot;4-4-Git-fetch&quot;&gt;&lt;a href=&quot;#4-4-Git-fetch&quot; class=&quot;headerlink&quot; title=&quot;4.4. Git fetch&quot;&gt;&lt;/a&gt;4.4. Git fetch&lt;/h3&gt;&lt;p&gt;从服务器的仓库中下载代码。（与服务器交互，从服务器上下载最新代码）&lt;/p&gt;
&lt;p&gt;相当于从远程获取最新版本到本地，不会自动merge，比Git pull更安全些。&lt;/p&gt;
&lt;p&gt;使用此方法来获取服务器上的更新。&lt;/p&gt;
&lt;p&gt;例如：如果使用git checkout nov/eclair_rocket （nov/eclair_rocket为服务器上的分支名），则是获取上次使用git fetch命令时从服务器上下载的代码；如果先使用 git fetch ，再使用git checkout nov/eclair_rocket，则是先从服务器上获取最新的更新信息，然后从服务器上下载最新的代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git操作指南&quot;&gt;&lt;a href=&quot;#Git操作指南&quot; class=&quot;headerlink&quot; title=&quot;Git操作指南&quot;&gt;&lt;/a&gt;Git操作指南&lt;/h1&gt;&lt;h2 id=&quot;1-Git概念&quot;&gt;&lt;a href=&quot;#1-Git概念&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>iOS 四种保存数据的方式</title>
    <link href="http://yoursite.com/2016/03/14/iOS%20%E5%9B%9B%E7%A7%8D%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/03/14/iOS 四种保存数据的方式/</id>
    <published>2016-03-14T09:28:47.000Z</published>
    <updated>2016-03-14T09:40:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS-四种保存数据的方式&quot;&gt;&lt;a href=&quot;#iOS-四种保存数据的方式&quot; class=&quot;headerlink&quot; title=&quot;iOS 四种保存数据的方式&quot;&gt;&lt;/a&gt;iOS 四种保存数据的方式&lt;/h1&gt;&lt;p&gt;在iOS开发过程中，不管是做什么应用，都会碰到数据保存的问题。将数据保存到本地，能够让程序的运行更加流畅，不会出现让人厌恶的菊花形状，使得用户体验更好。下面介绍一下数据保存的方式：&lt;/p&gt;
&lt;h2 id=&quot;1-NSKeyedArchiver：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder-和initWithCoder-方法。前一个方法告诉系统怎么对对象进行编码，而后一个方法则是告诉系统怎么对对象进行解码。例如对Possession对象归档保存。&quot;&gt;&lt;a href=&quot;#1-NSKeyedArchiver：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder-和initWithCoder-方法。前一个方法告诉系统怎么对对象进行编码，而后一个方法则是告诉系统怎么对对象进行解码。例如对Possession对象归档保存。&quot; class=&quot;headerlink&quot; title=&quot;1.NSKeyedArchiver：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。前一个方法告诉系统怎么对对象进行编码，而后一个方法则是告诉系统怎么对对象进行解码。例如对Possession对象归档保存。&quot;&gt;&lt;/a&gt;1.NSKeyedArchiver：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。前一个方法告诉系统怎么对对象进行编码，而后一个方法则是告诉系统怎么对对象进行解码。例如对Possession对象归档保存。&lt;/h2&gt;&lt;h3 id=&quot;定义Possession：&quot;&gt;&lt;a href=&quot;#定义Possession：&quot; class=&quot;headerlink&quot; title=&quot;定义Possession：&quot;&gt;&lt;/a&gt;定义Possession：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface  Possession：NSObject&amp;lt;NSCoding&amp;gt;&amp;#123;//遵守NSCoding协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       NSString *name;//待归档类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation Possession&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)encodeWithCoder:(NSCoder *)aCoder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [aCoder encodeObject:name forKey:@&amp;quot;name&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)initWithCoder:(NSCoder *)aDecoder&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name=[[aDeCoder decodeObjectforKey:@&amp;quot;name&amp;quot;] retain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;归档操作：&quot;&gt;&lt;a href=&quot;#归档操作：&quot; class=&quot;headerlink&quot; title=&quot;归档操作：&quot;&gt;&lt;/a&gt;归档操作：&lt;/h3&gt;&lt;p&gt;如果对Possession对象allPossession归档保存，只需要NSCoder子类NSKeyedArchiver的方法archiveRootObject:toFile: 即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *path = [self possessionArchivePath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSKeyedArchiver archiveRootObject:allPossessions toFile:path];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解压操作：&quot;&gt;&lt;a href=&quot;#解压操作：&quot; class=&quot;headerlink&quot; title=&quot;解压操作：&quot;&gt;&lt;/a&gt;解压操作：&lt;/h3&gt;&lt;p&gt;同样调用NSCoder子类NSKeyedArchiver的方法unarchiveRootObject:toFile: 即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;allPossessions = [[NSKeyedUnarchiver unarchiveObjectWithFile:path] retain];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点：归档的形式来保存数据，只能一次性归档保存以及一次性解压。所以只能针对小量数据，而且对数据操作比较笨拙，即如果想改动数据的某一小部分，还是需要解压整个数据或者归档整个数据。&lt;/p&gt;
&lt;h2 id=&quot;2-NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。如果要存储其他类型，则需要转换为前面的类型，才能用NSUserDefaults存储。具体实现为：&quot;&gt;&lt;a href=&quot;#2-NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。如果要存储其他类型，则需要转换为前面的类型，才能用NSUserDefaults存储。具体实现为：&quot; class=&quot;headerlink&quot; title=&quot;2.NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。如果要存储其他类型，则需要转换为前面的类型，才能用NSUserDefaults存储。具体实现为：&quot;&gt;&lt;/a&gt;2.NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。如果要存储其他类型，则需要转换为前面的类型，才能用NSUserDefaults存储。具体实现为：&lt;/h2&gt;&lt;h3 id=&quot;保存数据：&quot;&gt;&lt;a href=&quot;#保存数据：&quot; class=&quot;headerlink&quot; title=&quot;保存数据：&quot;&gt;&lt;/a&gt;保存数据：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSUserDefaults *defaults =[NSUserDefaults standardUserDefaults];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *name =@”default string“;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[defaults setObject:firstName forKey:@&amp;quot;name&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//获得UIImage实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImage *image=[[UIImage alloc]initWithContentsOfFile:@&amp;quot;photo.jpg&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//UIImage对象转换成NSData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSData *imageData = UIImageJPEGRepresentation(image, 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//用synchronize方法把数据持久化到standardUserDefaults数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[defaults synchronize];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;读取数据：&quot;&gt;&lt;a href=&quot;#读取数据：&quot; class=&quot;headerlink&quot; title=&quot;读取数据：&quot;&gt;&lt;/a&gt;读取数据：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSUserDefaults *defaults =[NSUserDefaults standardUserDefaults];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//根据键值取出name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *name = [defaults objectForKey:@&amp;quot;name&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSData *imageData = [defaults dataForKey:@&amp;quot;image&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//NSData转换为UIImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImage *Image = [UIImage imageWithData:imageData];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-Write写入方式：永久保存在磁盘中。具体方法为：&quot;&gt;&lt;a href=&quot;#3-Write写入方式：永久保存在磁盘中。具体方法为：&quot; class=&quot;headerlink&quot; title=&quot;3. Write写入方式：永久保存在磁盘中。具体方法为：&quot;&gt;&lt;/a&gt;3. Write写入方式：永久保存在磁盘中。具体方法为：&lt;/h3&gt;&lt;p&gt;##第一步：获得文件即将保存的路径：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,  NSUserDomainMask,YES);//使用C函数NSSearchPathForDirectoriesInDomains来获得沙盒中目录的全路径。该函数有三个参数，目录类型、he domain mask、布尔值。其中布尔值表示是否需要通过～扩展路径。而且第一个参数是不变的，即为NSSearchPathDirectory 。在IOS中后两个参数也是不变的，即为：NSUserDomainMask 和 YES。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; NSString *ourDocumentPath =[documentPaths objectAtIndex:0];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一种方法是使用NSHomeDirectory函数获得sandbox的路径。具体的用法为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Once you have the full sandbox path, you can create a path from it，但是不能在sandbox的本文件层上写文件也不能创建目录，而应该是此基础上创建一个新的可写的目录，例如Documents,Library或者temp。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *sandboxPath = NSHomeDirectory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//将Documents添加到sandbox路径上，具体原因前面分析了！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *documentPath = [sandboxPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stringByAppendingPathComponent:@&amp;quot;Documents&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两者的区别就是：使用NSSearchPathForDirectoriesInDomains比在NSHomeDirectory后面添加Document更加安全。因为该文件目录可能在未来发送的系统上发生改变。&lt;/p&gt;
&lt;h3 id=&quot;第二步：生成在该路径下的文件：&quot;&gt;&lt;a href=&quot;#第二步：生成在该路径下的文件：&quot; class=&quot;headerlink&quot; title=&quot;第二步：生成在该路径下的文件：&quot;&gt;&lt;/a&gt;第二步：生成在该路径下的文件：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//fileName就是保存文件的文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *FileName=[documentDirectory stringByAppendingPathComponent:fileName];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;第三步：往文件中写入数据：&quot;&gt;&lt;a href=&quot;#第三步：往文件中写入数据：&quot; class=&quot;headerlink&quot; title=&quot;第三步：往文件中写入数据：&quot;&gt;&lt;/a&gt;第三步：往文件中写入数据：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//将NSData类型对象data写入文件，文件名为FileName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[data writeToFile:FileName atomically:YES];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;最后：从文件中读出数据：&quot;&gt;&lt;a href=&quot;#最后：从文件中读出数据：&quot; class=&quot;headerlink&quot; title=&quot;最后：从文件中读出数据：&quot;&gt;&lt;/a&gt;最后：从文件中读出数据：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//从FileName中读取出数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSData data=[NSData dataWithContentsOfFile:FileName options:0 error:NULL];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-SQLite：采用SQLite数据库来存储数据。SQLite作为一中小型数据库，应用ios中，跟前三种保存方式相比，相对比较复杂一些。还是一步步来吧！&quot;&gt;&lt;a href=&quot;#4-SQLite：采用SQLite数据库来存储数据。SQLite作为一中小型数据库，应用ios中，跟前三种保存方式相比，相对比较复杂一些。还是一步步来吧！&quot; class=&quot;headerlink&quot; title=&quot;4. SQLite：采用SQLite数据库来存储数据。SQLite作为一中小型数据库，应用ios中，跟前三种保存方式相比，相对比较复杂一些。还是一步步来吧！&quot;&gt;&lt;/a&gt;4. SQLite：采用SQLite数据库来存储数据。SQLite作为一中小型数据库，应用ios中，跟前三种保存方式相比，相对比较复杂一些。还是一步步来吧！&lt;/h2&gt;&lt;h3 id=&quot;第一步：需要添加SQLite相关的库以及头文件：在项目文件的Build-Phases下，找到Link-Binary-Library-ies-，添加libsqlite3-0-dylib（libsqlite3-dylib与前者的区别暂时不知，两者应该差不多）；在项目文件中头文件或者源文件中添加头文件-import-“-usr-include-sqlite3-h”&quot;&gt;&lt;a href=&quot;#第一步：需要添加SQLite相关的库以及头文件：在项目文件的Build-Phases下，找到Link-Binary-Library-ies-，添加libsqlite3-0-dylib（libsqlite3-dylib与前者的区别暂时不知，两者应该差不多）；在项目文件中头文件或者源文件中添加头文件-import-“-usr-include-sqlite3-h”&quot; class=&quot;headerlink&quot; title=&quot;第一步：需要添加SQLite相关的库以及头文件：在项目文件的Build Phases下，找到Link Binary Library(ies)，添加libsqlite3.0.dylib（libsqlite3.dylib与前者的区别暂时不知，两者应该差不多）；在项目文件中头文件或者源文件中添加头文件#import “/usr/include/sqlite3.h”&quot;&gt;&lt;/a&gt;第一步：需要添加SQLite相关的库以及头文件：在项目文件的Build Phases下，找到Link Binary Library(ies)，添加libsqlite3.0.dylib（libsqlite3.dylib与前者的区别暂时不知，两者应该差不多）；在项目文件中头文件或者源文件中添加头文件#import “/usr/include/sqlite3.h”&lt;/h3&gt;&lt;h3 id=&quot;第二步：开始使用SQLite：&quot;&gt;&lt;a href=&quot;#第二步：开始使用SQLite：&quot; class=&quot;headerlink&quot; title=&quot;第二步：开始使用SQLite：&quot;&gt;&lt;/a&gt;第二步：开始使用SQLite：&lt;/h3&gt;&lt;p&gt;使用前注意：如果不往数据库里面添加任何的表，这个数据库等于没有建立，不会在硬盘上产生任何文件，如果数据库已经存在，则会打开这个数据库。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *documentsPaths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask , YES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *databaseFilePath=[[documentsPaths objectAtIndex:0] stringByAppendingPathComponent:@&amp;quot;mydb&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//上面两句已经比较熟悉了吧！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//打开数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (sqlite3_open([databaseFilePath UTF8String], &amp;amp;database)==SQLITE_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;sqlite dadabase is opened.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&amp;#123; return;&amp;#125;//打开不成功就返回&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在打开了数据库的前提下，如果数据库没有表，那就开始建表了哦！&quot;&gt;&lt;a href=&quot;#在打开了数据库的前提下，如果数据库没有表，那就开始建表了哦！&quot; class=&quot;headerlink&quot; title=&quot;在打开了数据库的前提下，如果数据库没有表，那就开始建表了哦！&quot;&gt;&lt;/a&gt;在打开了数据库的前提下，如果数据库没有表，那就开始建表了哦！&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char *createSql=&amp;quot;create table(id integer primary key autoincrement, name text)&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (sqlite3_exec(database, createSql, NULL, NULL, &amp;amp;error)==SQLITE_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;create table is ok.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       NSLog(@&amp;quot;error: %s&amp;quot;,error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       sqlite3_free(error);//每次使用完毕清空error字符串，提供给下一次使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;建表完成之后，就开始插入记录：&quot;&gt;&lt;a href=&quot;#建表完成之后，就开始插入记录：&quot; class=&quot;headerlink&quot; title=&quot;建表完成之后，就开始插入记录：&quot;&gt;&lt;/a&gt;建表完成之后，就开始插入记录：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char *insertSql=&amp;quot;insert into a person (name) values(‘gg’)&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (sqlite3_exec(database, insertSql, NULL, NULL, &amp;amp;error)==SQLITE_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;insert operation is ok.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       NSLog(@&amp;quot;error: %s&amp;quot;,error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       sqlite3_free(error);//每次使用完毕清空error字符串，提供给下一次使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;下一步，查询记录：&quot;&gt;&lt;a href=&quot;#下一步，查询记录：&quot; class=&quot;headerlink&quot; title=&quot;下一步，查询记录：&quot;&gt;&lt;/a&gt;下一步，查询记录：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const char *selectSql=&amp;quot;select id,name from a person&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlite3_stmt *statement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (sqlite3_prepare_v2(database,selectSql, -1, &amp;amp;statement, nil)==SQLITE_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&amp;quot;select operation is ok.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       NSLog(@&amp;quot;error: %s&amp;quot;,error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       sqlite3_free(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(sqlite3_step(statement)==SQLITE_ROW) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int _id=sqlite3_column_int(statement, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *name=(char*)sqlite3_column_text(statement, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;row&amp;gt;&amp;gt;id %i, name %s&amp;quot;,_id,name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlite3_finalize(statement);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;最后，关闭数据库：&quot;&gt;&lt;a href=&quot;#最后，关闭数据库：&quot; class=&quot;headerlink&quot; title=&quot;最后，关闭数据库：&quot;&gt;&lt;/a&gt;最后，关闭数据库：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sqlite3_close(database);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：写入数据库，字符串可以采用char方式，而从数据库中取出char类型，当char类型有表示中文字符时，会出现乱码。这是因为数据库默认使用ascII编码方式。所以要想正确从数据库中取出中文，需要用NSString来接收从数据库取出的字符串。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS-四种保存数据的方式&quot;&gt;&lt;a href=&quot;#iOS-四种保存数据的方式&quot; class=&quot;headerlink&quot; title=&quot;iOS 四种保存数据的方式&quot;&gt;&lt;/a&gt;iOS 四种保存数据的方式&lt;/h1&gt;&lt;p&gt;在iOS开发过程中，不管是做什么应用，都会碰到数据保
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>介绍一些正在使用或者好玩的iOS越狱插件</title>
    <link href="http://yoursite.com/2016/03/11/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%88%96%E8%80%85%E5%A5%BD%E7%8E%A9%E7%9A%84iOS%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/03/11/介绍一些正在使用或者好玩的iOS越狱插件/</id>
    <published>2016-03-11T07:07:58.000Z</published>
    <updated>2016-03-17T08:21:31.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;介绍一些正在使用或者好玩的iOS越狱插件&quot;&gt;&lt;a href=&quot;#介绍一些正在使用或者好玩的iOS越狱插件&quot; class=&quot;headerlink&quot; title=&quot;介绍一些正在使用或者好玩的iOS越狱插件&quot;&gt;&lt;/a&gt;介绍一些正在使用或者好玩的iOS越狱插件&lt;/h1&gt;&lt;h2 id=&quot;什么是越狱&quot;&gt;&lt;a href=&quot;#什么是越狱&quot; class=&quot;headerlink&quot; title=&quot;什么是越狱&quot;&gt;&lt;/a&gt;什么是越狱&lt;/h2&gt;&lt;p&gt;“越狱”指的是绕过苹果在其设备上对操作系统施加的很多限制，从而可以“Root访问”基础的操作系统。简单来说，“越狱”可以让iPhone用户从苹果应用商店外下载其他非官方的应用程序，或者对用户界面进行定制。&lt;/p&gt;
&lt;h2 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h2&gt;&lt;h3 id=&quot;DataMember&quot;&gt;&lt;a href=&quot;#DataMember&quot; class=&quot;headerlink&quot; title=&quot;DataMember&quot;&gt;&lt;/a&gt;DataMember&lt;/h3&gt;&lt;p&gt;一款可以实时显示网络数据的悬浮窗控件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通知中心显示wifi和数据流量信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态显示数据传转速率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按天,周,月显示数据使用情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可通过设置选项自定义显示&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EnableLivePhotos&quot;&gt;&lt;a href=&quot;#EnableLivePhotos&quot; class=&quot;headerlink&quot; title=&quot;EnableLivePhotos&quot;&gt;&lt;/a&gt;EnableLivePhotos&lt;/h3&gt;&lt;p&gt;使用EnableLivePhotos后不仅仅是可以在拍照界面中开启LivePhotos模式，还能在图库中像iPhone6s系列那样浏览拍下来的动态图，长按即可查看整个动态效果;并且可以通过“分享”按钮将 LivePhotos设置成动态的桌面或者锁屏壁纸，同样通过长按即可让图片动起来。&lt;/p&gt;
&lt;h3 id=&quot;Kuaidial&quot;&gt;&lt;a href=&quot;#Kuaidial&quot; class=&quot;headerlink&quot; title=&quot;Kuaidial&quot;&gt;&lt;/a&gt;Kuaidial&lt;/h3&gt;&lt;p&gt;Kuaidial是一款知名的iOS越狱来电归属地插件。众所周知，苹果在iOS8中首次加入了来电归属地功能，但是该功能仅限于陌生来电，对于已加入通讯录中的号码则不具备归属地显示功能，并且也不支持短信归属地及T9拨号等功能。而Kuaidial之所以深受越狱用户的喜爱，正是因为其能满足用户在这些方面的需求，更全面的电话/短信归属地显示功能、更方便快捷的T9拨号，还能支持自定义拦截黑名单等，多少用户越狱正是为Kuaidial而来。&lt;/p&gt;
&lt;h3 id=&quot;Flex2&quot;&gt;&lt;a href=&quot;#Flex2&quot; class=&quot;headerlink&quot; title=&quot;Flex2&quot;&gt;&lt;/a&gt;Flex2&lt;/h3&gt;&lt;p&gt;这款插件想必很多熟悉越狱的用户都不会陌生，它就是大名鼎鼎的Flex。最新版的Flex2拥有“反越狱检查”功能，可以让越狱后的设备避开App本身的检查机制，从而继续使用方便快捷的指纹支付功能。此外，该插件还能支持去掉部分App中的广告，功能甚是强大。&lt;/p&gt;
&lt;h3 id=&quot;revealMenu&quot;&gt;&lt;a href=&quot;#revealMenu&quot; class=&quot;headerlink&quot; title=&quot;revealMenu&quot;&gt;&lt;/a&gt;revealMenu&lt;/h3&gt;&lt;p&gt;一款名为Forcy的iOS9越狱插件可以让旧iPhone玩上3D Touch功能，事实上这并不是唯一一款类iPhone6s 3D Touch功能插件，下面小编为你推荐另外一款3D Touch插件——revealMenu，据已经体验过的小伙伴反馈，这款插件的功能还强过Forcy。&lt;br&gt;在操作方式上，Forcy通过上滑触发，而revealMenu通过长按触发，并且配合另一个插件Hapticle提供的振动反馈，做到跟iPhone6s几乎一模一样。(Hapticle同样适用于Forcy，如果你更喜欢Forcy，也可以装Hapticle添加振动反馈)&lt;/p&gt;
&lt;h3 id=&quot;Springtomize-3&quot;&gt;&lt;a href=&quot;#Springtomize-3&quot; class=&quot;headerlink&quot; title=&quot;Springtomize 3&quot;&gt;&lt;/a&gt;Springtomize 3&lt;/h3&gt;&lt;p&gt;大家对于Springtomize系列插件应该是非常熟悉了，它可以对iOS中的大部分元素进行自定义，堪称插件中的“瑞士军刀”，它提供了许多功能，包括：动画效果、图标美化、锁屏界面自定义、隐藏Dock栏、控制中心增强等。&lt;/p&gt;
&lt;h3 id=&quot;Auxo-3&quot;&gt;&lt;a href=&quot;#Auxo-3&quot; class=&quot;headerlink&quot; title=&quot;Auxo 3&quot;&gt;&lt;/a&gt;Auxo 3&lt;/h3&gt;&lt;p&gt;大部分越狱用户对Auxo 3应该不会感到陌生。而对于新用户来说，如果你希望寻找新的应用切换体验的话，Auxo 3一定不可错过。Auxo 3将控制中心和应用切换界面进行了整合，用户只需从屏幕底部向上滑动即可呼出新的界面。&lt;/p&gt;
&lt;h3 id=&quot;Activator&quot;&gt;&lt;a href=&quot;#Activator&quot; class=&quot;headerlink&quot; title=&quot;Activator&quot;&gt;&lt;/a&gt;Activator&lt;/h3&gt;&lt;p&gt;一直以来，Activator都是iOS平台上最受欢迎的插件之一，因为它可以带来各种各样的手势操作，最大限度地解放手机上的Home键。在手机的主界面上，用户可以选择在多种情况下使用手势：任何地方、主屏幕上、应用内和锁屏界面。一般情况下，任何地方就是指用户设置的快捷键会在主屏幕和应用内触发，但不包括锁屏状态。&lt;/p&gt;
&lt;h3 id=&quot;WinterBoard&quot;&gt;&lt;a href=&quot;#WinterBoard&quot; class=&quot;headerlink&quot; title=&quot;WinterBoard&quot;&gt;&lt;/a&gt;WinterBoard&lt;/h3&gt;&lt;p&gt;目前适配iOS9的WinterBoard已经上架Cydia，iOS设备美化控不能错过。作为越狱的一个主要原因，让iOS设备更个性化一直是不少用户的愿望，而WinterBoard则提供了这样一个平台。如果说iOS发展到今天已经没有其它必要越狱的话，美化或许会是最后的一个越狱理由。  &lt;/p&gt;
&lt;h3 id=&quot;BioProtect&quot;&gt;&lt;a href=&quot;#BioProtect&quot; class=&quot;headerlink&quot; title=&quot;BioProtect&quot;&gt;&lt;/a&gt;BioProtect&lt;/h3&gt;&lt;p&gt;手机越来越成为人们生活的私密物品，大多数人的手机中多多少少都会储存着一些私密信息如私照、视频或是短信等等，而在日常使用中又难免有时会碰到别人借手机的情景，这个时候对私密信息进行加密就显得非常重要了。为你推荐一款越狱指纹加密插件——BioProtect，支持iOS9越狱。&lt;/p&gt;
&lt;h3 id=&quot;Forcy&quot;&gt;&lt;a href=&quot;#Forcy&quot; class=&quot;headerlink&quot; title=&quot;Forcy&quot;&gt;&lt;/a&gt;Forcy&lt;/h3&gt;&lt;p&gt;这款插件名为Forcy，与iPhone6s上通过按压呼出二级菜单不同，Forcy只需用户对桌面上的应用图标执行上滑操作便可呼出类似3D Touch的快捷菜单。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍一些正在使用或者好玩的iOS越狱插件&quot;&gt;&lt;a href=&quot;#介绍一些正在使用或者好玩的iOS越狱插件&quot; class=&quot;headerlink&quot; title=&quot;介绍一些正在使用或者好玩的iOS越狱插件&quot;&gt;&lt;/a&gt;介绍一些正在使用或者好玩的iOS越狱插件&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="越狱插件" scheme="http://yoursite.com/categories/%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6/iOS/"/>
    
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="越狱插件" scheme="http://yoursite.com/tags/%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>iOS9 3DTouch、ShortcutItem、Peek And Pop技术一览</title>
    <link href="http://yoursite.com/2016/03/11/iOS9%203DTouch%E3%80%81ShortcutItem%E3%80%81Peek%20And%20Pop%E6%8A%80%E6%9C%AF%E4%B8%80%E8%A7%88/"/>
    <id>http://yoursite.com/2016/03/11/iOS9 3DTouch、ShortcutItem、Peek And Pop技术一览/</id>
    <published>2016-03-11T03:15:48.000Z</published>
    <updated>2016-03-11T07:27:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS9-3DTouch、ShortcutItem、Peek-And-Pop技术一览&quot;&gt;&lt;a href=&quot;#iOS9-3DTouch、ShortcutItem、Peek-And-Pop技术一览&quot; class=&quot;headerlink&quot; title=&quot;iOS9 3DTouch、ShortcutItem、Peek And Pop技术一览&quot;&gt;&lt;/a&gt;iOS9 3DTouch、ShortcutItem、Peek And Pop技术一览&lt;/h1&gt;&lt;h2 id=&quot;3DTouch&quot;&gt;&lt;a href=&quot;#3DTouch&quot; class=&quot;headerlink&quot; title=&quot;3DTouch&quot;&gt;&lt;/a&gt;3DTouch&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/ios/3d-touch/images/pressure-sensitivity_2x.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UITouch类里API的变化&quot;&gt;&lt;a href=&quot;#UITouch类里API的变化&quot; class=&quot;headerlink&quot; title=&quot;UITouch类里API的变化&quot;&gt;&lt;/a&gt;UITouch类里API的变化&lt;/h2&gt;&lt;h3 id=&quot;iOS9中添加的属性&quot;&gt;&lt;a href=&quot;#iOS9中添加的属性&quot; class=&quot;headerlink&quot; title=&quot;iOS9中添加的属性&quot;&gt;&lt;/a&gt;iOS9中添加的属性&lt;/h3&gt;&lt;h6 id=&quot;altitudeAngle&quot;&gt;&lt;a href=&quot;#altitudeAngle&quot; class=&quot;headerlink&quot; title=&quot;altitudeAngle&quot;&gt;&lt;/a&gt;altitudeAngle&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当笔平行于平面时,该值为0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当笔垂直于平面时,该值为Pi / 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;estimatedProperties&quot;&gt;&lt;a href=&quot;#estimatedProperties&quot; class=&quot;headerlink&quot; title=&quot;estimatedProperties&quot;&gt;&lt;/a&gt;estimatedProperties&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当前触摸对象估计的触摸特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回值是UITouchPropertyies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;updatedProperties&quot;&gt;&lt;a href=&quot;#updatedProperties&quot; class=&quot;headerlink&quot; title=&quot;updatedProperties&quot;&gt;&lt;/a&gt;updatedProperties&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当前触摸对象已经更新的触摸特性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回值是UITouchPropertyies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;estimationUpdateIndex&quot;&gt;&lt;a href=&quot;#estimationUpdateIndex&quot; class=&quot;headerlink&quot; title=&quot;estimationUpdateIndex&quot;&gt;&lt;/a&gt;estimationUpdateIndex&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当每个触摸对象的触摸特性发生变化时，该值将会单独增加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回值是NSNumber&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iOS9中添加的方法&quot;&gt;&lt;a href=&quot;#iOS9中添加的方法&quot; class=&quot;headerlink&quot; title=&quot;iOS9中添加的方法&quot;&gt;&lt;/a&gt;iOS9中添加的方法&lt;/h3&gt;&lt;h6 id=&quot;PreciseLocationInView&quot;&gt;&lt;a href=&quot;#PreciseLocationInView&quot; class=&quot;headerlink&quot; title=&quot;- PreciseLocationInView:&quot;&gt;&lt;/a&gt;- PreciseLocationInView:&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;当前触摸对象的坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;PrecisePreviousLocationInView&quot;&gt;&lt;a href=&quot;#PrecisePreviousLocationInView&quot; class=&quot;headerlink&quot; title=&quot;- PrecisePreviousLocationInView:&quot;&gt;&lt;/a&gt;- PrecisePreviousLocationInView:&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;当前触摸对象的前置坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;azimuthAngleInview&quot;&gt;&lt;a href=&quot;#azimuthAngleInview&quot; class=&quot;headerlink&quot; title=&quot;- azimuthAngleInview:&quot;&gt;&lt;/a&gt;- azimuthAngleInview:&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;沿着x轴正向的方位角&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当与x轴正向方向相同时,该值为0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当view参数为nil时，默认为keyWindow&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;azimuthUnitVectorInView&quot;&gt;&lt;a href=&quot;#azimuthUnitVectorInView&quot; class=&quot;headerlink&quot; title=&quot;- azimuthUnitVectorInView:&quot;&gt;&lt;/a&gt;- azimuthUnitVectorInView:&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当前触摸对象的方向上的单位向量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当view参数为nil时，默认为keyWindow&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UIForceTouchCapability&quot;&gt;&lt;a href=&quot;#UIForceTouchCapability&quot; class=&quot;headerlink&quot; title=&quot;UIForceTouchCapability&quot;&gt;&lt;/a&gt;UIForceTouchCapability&lt;/h3&gt;&lt;h6 id=&quot;UIForceTouchCapabilityUnknown&quot;&gt;&lt;a href=&quot;#UIForceTouchCapabilityUnknown&quot; class=&quot;headerlink&quot; title=&quot;UIForceTouchCapabilityUnknown&quot;&gt;&lt;/a&gt;UIForceTouchCapabilityUnknown&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;不能确定是否支持压力感应&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;UIForceTouchCapabilityUnavailable&quot;&gt;&lt;a href=&quot;#UIForceTouchCapabilityUnavailable&quot; class=&quot;headerlink&quot; title=&quot;UIForceTouchCapabilityUnavailable&quot;&gt;&lt;/a&gt;UIForceTouchCapabilityUnavailable&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;不能支持压力感应&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;UIForceTouchCapabilityAvailable&quot;&gt;&lt;a href=&quot;#UIForceTouchCapabilityAvailable&quot; class=&quot;headerlink&quot; title=&quot;UIForceTouchCapabilityAvailable&quot;&gt;&lt;/a&gt;UIForceTouchCapabilityAvailable&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;可以支持压力感应&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UITouchType&quot;&gt;&lt;a href=&quot;#UITouchType&quot; class=&quot;headerlink&quot; title=&quot;UITouchType&quot;&gt;&lt;/a&gt;UITouchType&lt;/h3&gt;&lt;h6 id=&quot;UITouchTypeDirect&quot;&gt;&lt;a href=&quot;#UITouchTypeDirect&quot; class=&quot;headerlink&quot; title=&quot;UITouchTypeDirect&quot;&gt;&lt;/a&gt;UITouchTypeDirect&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;垂直的触摸类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;UITouchTypeIndirect&quot;&gt;&lt;a href=&quot;#UITouchTypeIndirect&quot; class=&quot;headerlink&quot; title=&quot;UITouchTypeIndirect&quot;&gt;&lt;/a&gt;UITouchTypeIndirect&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;非初值的触摸类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;UITouchTypeStylus&quot;&gt;&lt;a href=&quot;#UITouchTypeStylus&quot; class=&quot;headerlink&quot; title=&quot;UITouchTypeStylus&quot;&gt;&lt;/a&gt;UITouchTypeStylus&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;水平的触摸类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UITouchProperties&quot;&gt;&lt;a href=&quot;#UITouchProperties&quot; class=&quot;headerlink&quot; title=&quot;UITouchProperties&quot;&gt;&lt;/a&gt;UITouchProperties&lt;/h3&gt;&lt;h6 id=&quot;UITouchPropertyForce&quot;&gt;&lt;a href=&quot;#UITouchPropertyForce&quot; class=&quot;headerlink&quot; title=&quot;UITouchPropertyForce&quot;&gt;&lt;/a&gt;UITouchPropertyForce&lt;/h6&gt;&lt;h2 id=&quot;ShortcutItem&quot;&gt;&lt;a href=&quot;#ShortcutItem&quot; class=&quot;headerlink&quot; title=&quot;ShortcutItem&quot;&gt;&lt;/a&gt;ShortcutItem&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/ios/3d-touch/images/quick-actions_2x.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;静态方式&quot;&gt;&lt;a href=&quot;#静态方式&quot; class=&quot;headerlink&quot; title=&quot;静态方式&quot;&gt;&lt;/a&gt;静态方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开Info.plist文件&lt;/li&gt;
&lt;li&gt;在对应UIApplicationShortcutItems关键字下添加item&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;动态方式&quot;&gt;&lt;a href=&quot;#动态方式&quot; class=&quot;headerlink&quot; title=&quot;动态方式&quot;&gt;&lt;/a&gt;动态方式&lt;/h3&gt;&lt;h4 id=&quot;修改当前应用程序的某个shortcutItem&quot;&gt;&lt;a href=&quot;#修改当前应用程序的某个shortcutItem&quot; class=&quot;headerlink&quot; title=&quot;修改当前应用程序的某个shortcutItem&quot;&gt;&lt;/a&gt;修改当前应用程序的某个shortcutItem&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;//获取第0个shortcutItem  
id oldItem = [existingShortcutItems objectAtIndex: 0];  
//将旧的shortcutItem改变为可修改类型shortcutItem  
id mutableItem = [oldItem mutableCopy];  
//修改shortcutItem的显示标题  
[mutableItem setLocalizedTitle: @“Click Lewis”];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;获取当前应用程序的shortcutItems&quot;&gt;&lt;a href=&quot;#获取当前应用程序的shortcutItems&quot; class=&quot;headerlink&quot; title=&quot;获取当前应用程序的shortcutItems&quot;&gt;&lt;/a&gt;获取当前应用程序的shortcutItems&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;//获取当前应用程序对象  
UIApplication *app = [UIApplication sharedApplication];  
//获取一个应用程序对象的shortcutItem列表  
id existingShortcutItems = [app shortcutItems];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;重置当前应用程序的shortcutItems&quot;&gt;&lt;a href=&quot;#重置当前应用程序的shortcutItems&quot; class=&quot;headerlink&quot; title=&quot;重置当前应用程序的shortcutItems&quot;&gt;&lt;/a&gt;重置当前应用程序的shortcutItems&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;//根据旧的shortcutItems生成可变shortcutItems数组  
id updatedShortcutItems = [existingShortcutItems mutableCopy];  
//修改可变shortcutItems数组中对应index下的元素为新的shortcutItem  
[updatedShortcutItems replaceObjectAtIndex: 0 withObject: mutableItem];  
//修改应用程序对象的shortcutItems为新的数组  
[app setShortcutItems: updatedShortcutItems];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;创建一个新的UIApplicationShortcutItem&quot;&gt;&lt;a href=&quot;#创建一个新的UIApplicationShortcutItem&quot; class=&quot;headerlink&quot; title=&quot;创建一个新的UIApplicationShortcutItem&quot;&gt;&lt;/a&gt;创建一个新的UIApplicationShortcutItem&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始化函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-initWithType:localizedTitle:localizedSubtitle:icon:userInfo:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-initWithType:localizedTitle:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-localizedTitle:NSString&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-localizedSubtitle:NSString&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-type:NSString&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-icon:UIApplicationShortcutIcon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-userInfo:NSDictionary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只有只读特性，想要进行修改时，需要通过mutableCopy方法转变为NSMutableApplicationShortcutItem&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;创建一个新的Item图标&quot;&gt;&lt;a href=&quot;#创建一个新的Item图标&quot; class=&quot;headerlink&quot; title=&quot;创建一个新的Item图标&quot;&gt;&lt;/a&gt;创建一个新的Item图标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始化函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;+iconWithType:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+iconWithTemplateImageName:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+iconWithContact:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;当程序启动时&quot;&gt;&lt;a href=&quot;#当程序启动时&quot; class=&quot;headerlink&quot; title=&quot;当程序启动时&quot;&gt;&lt;/a&gt;当程序启动时&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;判断launchOptions字典内的UIApplicationLaunchOptionsShortcutItemKey是否为空&lt;/li&gt;
&lt;li&gt;当不为空时,application:didFinishLaunchWithOptions方法返回false，否则返回true&lt;/li&gt;
&lt;li&gt;在application:performActionForShortcutItem:completionHandler方法内处理点击事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Peek-and-Pop&quot;&gt;&lt;a href=&quot;#Peek-and-Pop&quot; class=&quot;headerlink&quot; title=&quot;Peek and Pop&quot;&gt;&lt;/a&gt;Peek and Pop&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/ios/3d-touch/images/peek-and-pop_2x.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;注册预览功能的代理对象和源视图&quot;&gt;&lt;a href=&quot;#注册预览功能的代理对象和源视图&quot; class=&quot;headerlink&quot; title=&quot;注册预览功能的代理对象和源视图&quot;&gt;&lt;/a&gt;注册预览功能的代理对象和源视图&lt;/h3&gt;&lt;h4 id=&quot;代理对象需要接受UIViewControllerPreviewingDelegate协议&quot;&gt;&lt;a href=&quot;#代理对象需要接受UIViewControllerPreviewingDelegate协议&quot; class=&quot;headerlink&quot; title=&quot;代理对象需要接受UIViewControllerPreviewingDelegate协议&quot;&gt;&lt;/a&gt;代理对象需要接受UIViewControllerPreviewingDelegate协议&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;@interface RootVC&amp;lt;UIViewControllerPreviewingDelegate&amp;gt;  
{}  
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;代理对象实现协议内的Peek和Pop方法&quot;&gt;&lt;a href=&quot;#代理对象实现协议内的Peek和Pop方法&quot; class=&quot;headerlink&quot; title=&quot;代理对象实现协议内的Peek和Pop方法&quot;&gt;&lt;/a&gt;代理对象实现协议内的Peek和Pop方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; @implementation RootVC  
    - (UIViewController *)previewingContext:(id&amp;lt;UIViewControllerPreviewing&amp;gt;)context viewControllerForLocation:(CGPoint) point  
{  
    UIViewController *childVC = [[UIViewController alloc] init];  
    childVC.preferredContentSize = CGSizeMake(0.0f,300f);  

    CGRect rect = CGRectMake(10, point.y - 10, self.view.frame.size.width - 20,20);  
    context.sourceRect = rect;  
    return childVC;  
}  

- (void)previewContext:(id&amp;lt;UIViewControllerPreviewing&amp;gt;)context commitViewController:(UIViewController*)vc  
{  
    [self showViewController:vc sender:self];  
}  
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;注册方法声明在UIViewController类内&quot;&gt;&lt;a href=&quot;#注册方法声明在UIViewController类内&quot; class=&quot;headerlink&quot; title=&quot;注册方法声明在UIViewController类内&quot;&gt;&lt;/a&gt;注册方法声明在UIViewController类内&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;[self registerForPreviewingWithDelegate:self sourceView:self.view];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 著作权归作者所有，原文链接:&lt;a href=&quot;http://www.jianshu.com/p/74fe6cbc542b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/74fe6cbc542b&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS9-3DTouch、ShortcutItem、Peek-And-Pop技术一览&quot;&gt;&lt;a href=&quot;#iOS9-3DTouch、ShortcutItem、Peek-And-Pop技术一览&quot; class=&quot;headerlink&quot; title=&quot;iOS9 3DT
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="3DTouch" scheme="http://yoursite.com/tags/3DTouch/"/>
    
  </entry>
  
</feed>
